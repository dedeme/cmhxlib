// Generated by Haxe 4.2.2
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
class B64Tests {
	static run() {
		let t = new dm_Test("B64");
		t.eq(dm_B64.encode("Cañónç䍆"),"Q2HDscOzbsOn5I2G",null,{ fileName : "src/B64Tests.hx", lineNumber : 12, className : "B64Tests", methodName : "run"});
		t.eq(dm_B64.decode(dm_B64.encode("Cañónç䍆")),"Cañónç䍆",null,{ fileName : "src/B64Tests.hx", lineNumber : 13, className : "B64Tests", methodName : "run"});
		let bs = haxe_io_Bytes.ofData(haxe_io_UInt8Array.fromArray([34,12,27,1]).buffer);
		let bs2 = dm_B64.decodeBytes(dm_B64.encodeBytes(bs));
		t.eq(bs.b[0],bs2.b[0],null,{ fileName : "src/B64Tests.hx", lineNumber : 17, className : "B64Tests", methodName : "run"});
		t.eq(bs.b[1],bs2.b[1],null,{ fileName : "src/B64Tests.hx", lineNumber : 17, className : "B64Tests", methodName : "run"});
		t.eq(bs.b[2],bs2.b[2],null,{ fileName : "src/B64Tests.hx", lineNumber : 17, className : "B64Tests", methodName : "run"});
		t.eq(bs.b[3],bs2.b[3],null,{ fileName : "src/B64Tests.hx", lineNumber : 17, className : "B64Tests", methodName : "run"});
		t.log();
	}
}
B64Tests.__name__ = true;
class CrypTests {
	static run() {
		let t = new dm_Test("Cryp");
		t.eq(dm_Cryp.genK(12).length,12,null,{ fileName : "src/CrypTests.hx", lineNumber : 11, className : "CrypTests", methodName : "run"});
		t.eq(dm_Cryp.key("deme",6),"wiWTB9",null,{ fileName : "src/CrypTests.hx", lineNumber : 13, className : "CrypTests", methodName : "run"});
		t.eq(dm_Cryp.key("Generaro",5),"Ixy8I",null,{ fileName : "src/CrypTests.hx", lineNumber : 14, className : "CrypTests", methodName : "run"});
		t.eq(dm_Cryp.key("Generara",5),"0DIih",null,{ fileName : "src/CrypTests.hx", lineNumber : 15, className : "CrypTests", methodName : "run"});
		t.eq(dm_Cryp.cryp("deme","Cañón€%ç"),"v12ftuzYeq2Xz7q7tLe8tNnHtqY=",null,{ fileName : "src/CrypTests.hx", lineNumber : 17, className : "CrypTests", methodName : "run"});
		t.eq(dm_Cryp.decryp("deme",dm_Cryp.cryp("deme","Cañón€%ç")),"Cañón€%ç",null,{ fileName : "src/CrypTests.hx", lineNumber : 18, className : "CrypTests", methodName : "run"});
		t.eq(dm_Cryp.decryp("deme",dm_Cryp.cryp("deme","1")),"1",null,{ fileName : "src/CrypTests.hx", lineNumber : 19, className : "CrypTests", methodName : "run"});
		t.eq(dm_Cryp.decryp("deme",dm_Cryp.cryp("deme","")),"",null,{ fileName : "src/CrypTests.hx", lineNumber : 20, className : "CrypTests", methodName : "run"});
		t.eq(dm_Cryp.decryp("",dm_Cryp.cryp("","Cañón€%ç")),"Cañón€%ç",null,{ fileName : "src/CrypTests.hx", lineNumber : 21, className : "CrypTests", methodName : "run"});
		t.eq(dm_Cryp.decryp("",dm_Cryp.cryp("","1")),"1",null,{ fileName : "src/CrypTests.hx", lineNumber : 22, className : "CrypTests", methodName : "run"});
		t.eq(dm_Cryp.decryp("",dm_Cryp.cryp("","")),"",null,{ fileName : "src/CrypTests.hx", lineNumber : 23, className : "CrypTests", methodName : "run"});
		t.eq(dm_Cryp.decryp("abc",dm_Cryp.cryp("abc","\n\ta€b c")),"\n\ta€b c",null,{ fileName : "src/CrypTests.hx", lineNumber : 24, className : "CrypTests", methodName : "run"});
		t.log();
	}
}
CrypTests.__name__ = true;
class DateTools {
	static __format_get(d,e) {
		switch(e) {
		case "%":
			return "%";
		case "A":
			return DateTools.DAY_NAMES[d.getDay()];
		case "B":
			return DateTools.MONTH_NAMES[d.getMonth()];
		case "C":
			return StringTools.lpad(Std.string(d.getFullYear() / 100 | 0),"0",2);
		case "D":
			return DateTools.__format(d,"%m/%d/%y");
		case "F":
			return DateTools.__format(d,"%Y-%m-%d");
		case "I":case "l":
			let hour = d.getHours() % 12;
			return StringTools.lpad(Std.string(hour == 0 ? 12 : hour),e == "I" ? "0" : " ",2);
		case "M":
			return StringTools.lpad(Std.string(d.getMinutes()),"0",2);
		case "R":
			return DateTools.__format(d,"%H:%M");
		case "S":
			return StringTools.lpad(Std.string(d.getSeconds()),"0",2);
		case "T":
			return DateTools.__format(d,"%H:%M:%S");
		case "Y":
			return Std.string(d.getFullYear());
		case "a":
			return DateTools.DAY_SHORT_NAMES[d.getDay()];
		case "b":case "h":
			return DateTools.MONTH_SHORT_NAMES[d.getMonth()];
		case "d":
			return StringTools.lpad(Std.string(d.getDate()),"0",2);
		case "e":
			return Std.string(d.getDate());
		case "H":case "k":
			return StringTools.lpad(Std.string(d.getHours()),e == "H" ? "0" : " ",2);
		case "m":
			return StringTools.lpad(Std.string(d.getMonth() + 1),"0",2);
		case "n":
			return "\n";
		case "p":
			if(d.getHours() > 11) {
				return "PM";
			} else {
				return "AM";
			}
			break;
		case "r":
			return DateTools.__format(d,"%I:%M:%S %p");
		case "s":
			return Std.string(d.getTime() / 1000 | 0);
		case "t":
			return "\t";
		case "u":
			let t = d.getDay();
			if(t == 0) {
				return "7";
			} else if(t == null) {
				return "null";
			} else {
				return "" + t;
			}
			break;
		case "w":
			return Std.string(d.getDay());
		case "y":
			return StringTools.lpad(Std.string(d.getFullYear() % 100),"0",2);
		default:
			throw new haxe_exceptions_NotImplementedException("Date.format %" + e + "- not implemented yet.",null,{ fileName : "DateTools.hx", lineNumber : 101, className : "DateTools", methodName : "__format_get"});
		}
	}
	static __format(d,f) {
		let r_b = "";
		let p = 0;
		while(true) {
			let np = f.indexOf("%",p);
			if(np < 0) {
				break;
			}
			let len = np - p;
			r_b += len == null ? HxOverrides.substr(f,p,null) : HxOverrides.substr(f,p,len);
			r_b += Std.string(DateTools.__format_get(d,HxOverrides.substr(f,np + 1,1)));
			p = np + 2;
		}
		let len = f.length - p;
		r_b += len == null ? HxOverrides.substr(f,p,null) : HxOverrides.substr(f,p,len);
		return r_b;
	}
	static format(d,f) {
		return DateTools.__format(d,f);
	}
}
DateTools.__name__ = true;
class DecTests {
	static run() {
		let t = new dm_Test("Dec");
		t.yes(dm_Dec.eq(dm_Dec.round(0,0),0,0.001),{ fileName : "src/DecTests.hx", lineNumber : 13, className : "DecTests", methodName : "run"});
		t.eq(dm_Dec.to(0,0),"0",null,{ fileName : "src/DecTests.hx", lineNumber : 14, className : "DecTests", methodName : "run"});
		t.eq(dm_Dec.toInt(0),0,null,{ fileName : "src/DecTests.hx", lineNumber : 15, className : "DecTests", methodName : "run"});
		t.eq(dm_Dec.toIso(0,0),"0",null,{ fileName : "src/DecTests.hx", lineNumber : 16, className : "DecTests", methodName : "run"});
		t.eq(dm_Dec.toEn(0,0),"0",null,{ fileName : "src/DecTests.hx", lineNumber : 17, className : "DecTests", methodName : "run"});
		t.yes(dm_Dec.eq(dm_Opt.get(dm_Dec.from("0")),0,0.001),{ fileName : "src/DecTests.hx", lineNumber : 18, className : "DecTests", methodName : "run"});
		t.yes(dm_Dec.eq(dm_Opt.get(dm_Dec.fromIso("0")),0,0.001),{ fileName : "src/DecTests.hx", lineNumber : 19, className : "DecTests", methodName : "run"});
		t.yes(dm_Dec.eq(dm_Opt.get(dm_Dec.fromEn("0")),0,0.001),{ fileName : "src/DecTests.hx", lineNumber : 20, className : "DecTests", methodName : "run"});
		t.yes(dm_Dec.eq(dm_Dec.round(0,0),0,0.001),{ fileName : "src/DecTests.hx", lineNumber : 22, className : "DecTests", methodName : "run"});
		t.eq(dm_Dec.to(0,0),"0",null,{ fileName : "src/DecTests.hx", lineNumber : 23, className : "DecTests", methodName : "run"});
		t.eq(dm_Dec.toIso(0,0),"0",null,{ fileName : "src/DecTests.hx", lineNumber : 24, className : "DecTests", methodName : "run"});
		t.eq(dm_Dec.toEn(0,0),"0",null,{ fileName : "src/DecTests.hx", lineNumber : 25, className : "DecTests", methodName : "run"});
		t.yes(dm_Dec.eq(dm_Opt.get(dm_Dec.from("-0")),0,0.001),{ fileName : "src/DecTests.hx", lineNumber : 26, className : "DecTests", methodName : "run"});
		t.yes(dm_Dec.eq(dm_Opt.get(dm_Dec.fromIso("-0")),0,0.001),{ fileName : "src/DecTests.hx", lineNumber : 27, className : "DecTests", methodName : "run"});
		t.yes(dm_Dec.eq(dm_Opt.get(dm_Dec.fromEn("-0")),0,0.001),{ fileName : "src/DecTests.hx", lineNumber : 28, className : "DecTests", methodName : "run"});
		t.yes(dm_Dec.eq(dm_Dec.round(-3.25499,2),-3.25,0.000001),{ fileName : "src/DecTests.hx", lineNumber : 30, className : "DecTests", methodName : "run"});
		t.eq(dm_Dec.to(-3.25499,2),"-3.25",null,{ fileName : "src/DecTests.hx", lineNumber : 31, className : "DecTests", methodName : "run"});
		t.eq(dm_Dec.toIso(-3.25499,2),"-3,25",null,{ fileName : "src/DecTests.hx", lineNumber : 32, className : "DecTests", methodName : "run"});
		t.eq(dm_Dec.toEn(-3.25499,2),"-3.25",null,{ fileName : "src/DecTests.hx", lineNumber : 33, className : "DecTests", methodName : "run"});
		t.yes(dm_Dec.eq(dm_Opt.get(dm_Dec.from("-3.25499")),-3.25499,0.000001),{ fileName : "src/DecTests.hx", lineNumber : 34, className : "DecTests", methodName : "run"});
		t.yes(dm_Dec.eq(dm_Opt.get(dm_Dec.fromIso("-3,25499")),-3.25499,0.000001),{ fileName : "src/DecTests.hx", lineNumber : 35, className : "DecTests", methodName : "run"});
		t.yes(dm_Dec.eq(dm_Opt.get(dm_Dec.fromEn("-3.25499")),-3.25499,0.000001),{ fileName : "src/DecTests.hx", lineNumber : 36, className : "DecTests", methodName : "run"});
		t.yes(dm_Dec.eq(dm_Dec.round(3.245,2),3.25,0.000001),{ fileName : "src/DecTests.hx", lineNumber : 38, className : "DecTests", methodName : "run"});
		t.not(dm_Dec.eq(dm_Dec.round(3.245,2),3.26,0.000001),{ fileName : "src/DecTests.hx", lineNumber : 39, className : "DecTests", methodName : "run"});
		t.not(dm_Dec.eq(dm_Dec.round(3.245,2),3.24,0.000001),{ fileName : "src/DecTests.hx", lineNumber : 40, className : "DecTests", methodName : "run"});
		t.eq(dm_Dec.to(3.245,2),"3.25",null,{ fileName : "src/DecTests.hx", lineNumber : 41, className : "DecTests", methodName : "run"});
		t.eq(dm_Dec.toIso(3.245,2),"3,25",null,{ fileName : "src/DecTests.hx", lineNumber : 42, className : "DecTests", methodName : "run"});
		t.eq(dm_Dec.toEn(3.245,2),"3.25",null,{ fileName : "src/DecTests.hx", lineNumber : 43, className : "DecTests", methodName : "run"});
		t.yes(dm_Dec.eq(dm_Opt.get(dm_Dec.from("3.245")),3.245,0.000001),{ fileName : "src/DecTests.hx", lineNumber : 44, className : "DecTests", methodName : "run"});
		t.yes(dm_Dec.eq(dm_Opt.get(dm_Dec.fromIso("3,245")),3.245,0.000001),{ fileName : "src/DecTests.hx", lineNumber : 45, className : "DecTests", methodName : "run"});
		t.yes(dm_Dec.eq(dm_Opt.get(dm_Dec.fromEn("3.245")),3.245,0.000001),{ fileName : "src/DecTests.hx", lineNumber : 46, className : "DecTests", methodName : "run"});
		t.yes(dm_Dec.eq(dm_Dec.round(-3.245,2),-3.25,0.000001),{ fileName : "src/DecTests.hx", lineNumber : 48, className : "DecTests", methodName : "run"});
		t.eq(dm_Dec.to(-3.245,2),"-3.25",null,{ fileName : "src/DecTests.hx", lineNumber : 49, className : "DecTests", methodName : "run"});
		t.eq(dm_Dec.toIso(-3.245,2),"-3,25",null,{ fileName : "src/DecTests.hx", lineNumber : 50, className : "DecTests", methodName : "run"});
		t.eq(dm_Dec.toEn(-3.245,2),"-3.25",null,{ fileName : "src/DecTests.hx", lineNumber : 51, className : "DecTests", methodName : "run"});
		t.yes(dm_Dec.eq(dm_Opt.get(dm_Dec.from("-3.245")),-3.245,0.000001),{ fileName : "src/DecTests.hx", lineNumber : 52, className : "DecTests", methodName : "run"});
		t.yes(dm_Dec.eq(dm_Opt.get(dm_Dec.fromIso("-3,245")),-3.245,0.000001),{ fileName : "src/DecTests.hx", lineNumber : 53, className : "DecTests", methodName : "run"});
		t.yes(dm_Dec.eq(dm_Opt.get(dm_Dec.fromEn("-3.245")),-3.245,0.000001),{ fileName : "src/DecTests.hx", lineNumber : 54, className : "DecTests", methodName : "run"});
		t.yes(dm_Dec.eq(dm_Dec.round(1.275,2),1.28,0.000001),{ fileName : "src/DecTests.hx", lineNumber : 56, className : "DecTests", methodName : "run"});
		t.eq(dm_Dec.to(1.275,2),"1.28",null,{ fileName : "src/DecTests.hx", lineNumber : 57, className : "DecTests", methodName : "run"});
		t.eq(dm_Dec.toIso(1.275,2),"1,28",null,{ fileName : "src/DecTests.hx", lineNumber : 58, className : "DecTests", methodName : "run"});
		t.eq(dm_Dec.toEn(1.275,2),"1.28",null,{ fileName : "src/DecTests.hx", lineNumber : 59, className : "DecTests", methodName : "run"});
		t.yes(dm_Dec.eq(dm_Opt.get(dm_Dec.from("1.275")),1.275,0.000001),{ fileName : "src/DecTests.hx", lineNumber : 60, className : "DecTests", methodName : "run"});
		t.yes(dm_Dec.eq(dm_Opt.get(dm_Dec.fromIso("1,275")),1.275,0.000001),{ fileName : "src/DecTests.hx", lineNumber : 61, className : "DecTests", methodName : "run"});
		t.yes(dm_Dec.eq(dm_Opt.get(dm_Dec.fromEn("1.275")),1.275,0.000001),{ fileName : "src/DecTests.hx", lineNumber : 62, className : "DecTests", methodName : "run"});
		t.yes(dm_Dec.eq(dm_Dec.round(0.09,1),0.1,0.000001),{ fileName : "src/DecTests.hx", lineNumber : 64, className : "DecTests", methodName : "run"});
		t.eq(dm_Dec.to(0.09,1),"0.1",null,{ fileName : "src/DecTests.hx", lineNumber : 65, className : "DecTests", methodName : "run"});
		t.eq(dm_Dec.toIso(0.09,1),"0,1",null,{ fileName : "src/DecTests.hx", lineNumber : 66, className : "DecTests", methodName : "run"});
		t.eq(dm_Dec.toEn(0.09,1),"0.1",null,{ fileName : "src/DecTests.hx", lineNumber : 67, className : "DecTests", methodName : "run"});
		t.yes(dm_Dec.eq(dm_Opt.get(dm_Dec.from("0.09")),0.09,0.000001),{ fileName : "src/DecTests.hx", lineNumber : 68, className : "DecTests", methodName : "run"});
		t.yes(dm_Dec.eq(dm_Opt.get(dm_Dec.fromIso("0,09")),0.09,0.000001),{ fileName : "src/DecTests.hx", lineNumber : 69, className : "DecTests", methodName : "run"});
		t.yes(dm_Dec.eq(dm_Opt.get(dm_Dec.fromEn("0.09")),0.09,0.000001),{ fileName : "src/DecTests.hx", lineNumber : 70, className : "DecTests", methodName : "run"});
		t.yes(dm_Dec.eq(dm_Dec.round(1.27499,2),1.27,0.000001),{ fileName : "src/DecTests.hx", lineNumber : 72, className : "DecTests", methodName : "run"});
		t.eq(dm_Dec.to(1.27499,2),"1.27",null,{ fileName : "src/DecTests.hx", lineNumber : 73, className : "DecTests", methodName : "run"});
		t.eq(dm_Dec.toIso(1.27499,2),"1,27",null,{ fileName : "src/DecTests.hx", lineNumber : 74, className : "DecTests", methodName : "run"});
		t.eq(dm_Dec.toEn(1.27499,2),"1.27",null,{ fileName : "src/DecTests.hx", lineNumber : 75, className : "DecTests", methodName : "run"});
		t.yes(dm_Dec.eq(dm_Opt.get(dm_Dec.from("1.27499")),1.27499,0.000001),{ fileName : "src/DecTests.hx", lineNumber : 76, className : "DecTests", methodName : "run"});
		t.yes(dm_Dec.eq(dm_Opt.get(dm_Dec.fromIso("1,27499")),1.27499,0.000001),{ fileName : "src/DecTests.hx", lineNumber : 77, className : "DecTests", methodName : "run"});
		t.yes(dm_Dec.eq(dm_Opt.get(dm_Dec.fromEn("1.27499")),1.27499,0.000001),{ fileName : "src/DecTests.hx", lineNumber : 78, className : "DecTests", methodName : "run"});
		t.yes(dm_Dec.eq(dm_Dec.round(3216234125.124,2),3216234125.12,0.000001),{ fileName : "src/DecTests.hx", lineNumber : 80, className : "DecTests", methodName : "run"});
		t.eq(dm_Dec.to(3216234125.124,2),"3216234125.12",null,{ fileName : "src/DecTests.hx", lineNumber : 81, className : "DecTests", methodName : "run"});
		t.eq(dm_Dec.toIso(3216234125.124,2),"3.216.234.125,12",null,{ fileName : "src/DecTests.hx", lineNumber : 82, className : "DecTests", methodName : "run"});
		t.eq(dm_Dec.toEn(3216234125.124,2),"3,216,234,125.12",null,{ fileName : "src/DecTests.hx", lineNumber : 83, className : "DecTests", methodName : "run"});
		t.yes(dm_Dec.eq(dm_Opt.get(dm_Dec.from("3216234125.124")),3216234125.124,0.000001),{ fileName : "src/DecTests.hx", lineNumber : 84, className : "DecTests", methodName : "run"});
		t.yes(dm_Dec.eq(dm_Opt.get(dm_Dec.fromIso("3.216.234.125,124")),3216234125.124,0.000001),{ fileName : "src/DecTests.hx", lineNumber : 86, className : "DecTests", methodName : "run"});
		t.yes(dm_Dec.eq(dm_Opt.get(dm_Dec.fromEn("3,216,234,125.124")),3216234125.124,0.000001),{ fileName : "src/DecTests.hx", lineNumber : 88, className : "DecTests", methodName : "run"});
		t.yes(dm_Dec.eq(dm_Dec.round(-16234125.124,2),-16234125.12,0.000001),{ fileName : "src/DecTests.hx", lineNumber : 91, className : "DecTests", methodName : "run"});
		t.eq(dm_Dec.to(-16234125.124,2),"-16234125.12",null,{ fileName : "src/DecTests.hx", lineNumber : 92, className : "DecTests", methodName : "run"});
		t.eq(dm_Dec.toIso(-16234125.124,2),"-16.234.125,12",null,{ fileName : "src/DecTests.hx", lineNumber : 93, className : "DecTests", methodName : "run"});
		t.eq(dm_Dec.toEn(-16234125.124,2),"-16,234,125.12",null,{ fileName : "src/DecTests.hx", lineNumber : 94, className : "DecTests", methodName : "run"});
		t.yes(dm_Dec.eq(dm_Opt.get(dm_Dec.from("-16234125.124")),-16234125.124,0.000001),{ fileName : "src/DecTests.hx", lineNumber : 95, className : "DecTests", methodName : "run"});
		t.yes(dm_Dec.eq(dm_Opt.get(dm_Dec.fromIso("-16.234.125,124")),-16234125.124,0.000001),{ fileName : "src/DecTests.hx", lineNumber : 97, className : "DecTests", methodName : "run"});
		t.yes(dm_Dec.eq(dm_Opt.get(dm_Dec.fromEn("-16,234,125.124")),-16234125.124,0.000001),{ fileName : "src/DecTests.hx", lineNumber : 99, className : "DecTests", methodName : "run"});
		t.yes(dm_Dec.eq(dm_Dec.round(16234125.124,0),16234125,0.000001),{ fileName : "src/DecTests.hx", lineNumber : 102, className : "DecTests", methodName : "run"});
		t.eq(dm_Dec.to(16234125.124,0),"16234125",null,{ fileName : "src/DecTests.hx", lineNumber : 103, className : "DecTests", methodName : "run"});
		t.eq(dm_Dec.toIso(16234125.124,0),"16.234.125",null,{ fileName : "src/DecTests.hx", lineNumber : 104, className : "DecTests", methodName : "run"});
		t.eq(dm_Dec.toEn(16234125.124,0),"16,234,125",null,{ fileName : "src/DecTests.hx", lineNumber : 105, className : "DecTests", methodName : "run"});
		t.yes(dm_Dec.eq(dm_Opt.get(dm_Dec.from("16234125.124")),16234125.124,0.000001),{ fileName : "src/DecTests.hx", lineNumber : 106, className : "DecTests", methodName : "run"});
		t.yes(dm_Dec.eq(dm_Opt.get(dm_Dec.fromIso("16.234.125,124")),16234125.124,0.000001),{ fileName : "src/DecTests.hx", lineNumber : 108, className : "DecTests", methodName : "run"});
		t.yes(dm_Dec.eq(dm_Opt.get(dm_Dec.fromEn("16,234,125.124")),16234125.124,0.000001),{ fileName : "src/DecTests.hx", lineNumber : 110, className : "DecTests", methodName : "run"});
		t.yes(dm_Dec.eq(dm_Dec.round(16234125.1,2),16234125.1,0.000001),{ fileName : "src/DecTests.hx", lineNumber : 113, className : "DecTests", methodName : "run"});
		t.eq(dm_Dec.to(16234125.1,2),"16234125.10",null,{ fileName : "src/DecTests.hx", lineNumber : 114, className : "DecTests", methodName : "run"});
		t.eq(dm_Dec.toIso(16234125.1,2),"16.234.125,10",null,{ fileName : "src/DecTests.hx", lineNumber : 115, className : "DecTests", methodName : "run"});
		t.eq(dm_Dec.toEn(16234125.1,2),"16,234,125.10",null,{ fileName : "src/DecTests.hx", lineNumber : 116, className : "DecTests", methodName : "run"});
		t.yes(dm_Dec.eq(dm_Opt.get(dm_Dec.from("16234125.124")),16234125.124,0.000001),{ fileName : "src/DecTests.hx", lineNumber : 117, className : "DecTests", methodName : "run"});
		t.yes(dm_Dec.eq(dm_Opt.get(dm_Dec.fromIso("16.234.125,124")),16234125.124,0.000001),{ fileName : "src/DecTests.hx", lineNumber : 119, className : "DecTests", methodName : "run"});
		t.yes(dm_Dec.eq(dm_Opt.get(dm_Dec.fromEn("16,234,125.124")),16234125.124,0.000001),{ fileName : "src/DecTests.hx", lineNumber : 121, className : "DecTests", methodName : "run"});
		t.yes(dm_Dec.eq(dm_Dec.round(16234125,2),16234125,0.000001),{ fileName : "src/DecTests.hx", lineNumber : 124, className : "DecTests", methodName : "run"});
		t.eq(dm_Dec.to(16234125,2),"16234125.00",null,{ fileName : "src/DecTests.hx", lineNumber : 125, className : "DecTests", methodName : "run"});
		t.eq(dm_Dec.toIso(16234125,2),"16.234.125,00",null,{ fileName : "src/DecTests.hx", lineNumber : 126, className : "DecTests", methodName : "run"});
		t.eq(dm_Dec.toEn(16234125,2),"16,234,125.00",null,{ fileName : "src/DecTests.hx", lineNumber : 127, className : "DecTests", methodName : "run"});
		t.yes(dm_Dec.eq(dm_Opt.get(dm_Dec.from("16234125")),16234125,0.000001),{ fileName : "src/DecTests.hx", lineNumber : 128, className : "DecTests", methodName : "run"});
		t.yes(dm_Dec.eq(dm_Opt.get(dm_Dec.fromIso("16.234.125")),16234125,0.000001),{ fileName : "src/DecTests.hx", lineNumber : 130, className : "DecTests", methodName : "run"});
		t.yes(dm_Dec.eq(dm_Opt.get(dm_Dec.fromEn("16,234,125")),16234125,0.000001),{ fileName : "src/DecTests.hx", lineNumber : 132, className : "DecTests", methodName : "run"});
		t.yes(dm_Dec.digits(""),{ fileName : "src/DecTests.hx", lineNumber : 135, className : "DecTests", methodName : "run"});
		t.yes(dm_Dec.digits("153"),{ fileName : "src/DecTests.hx", lineNumber : 136, className : "DecTests", methodName : "run"});
		t.not(dm_Dec.digits("153a"),{ fileName : "src/DecTests.hx", lineNumber : 137, className : "DecTests", methodName : "run"});
		t.log();
	}
}
DecTests.__name__ = true;
class DtTests {
	static run() {
		let t = new dm_Test("Dt");
		let d = new Date();
		t.eq(dm_Dt.to(d).length,8,null,{ fileName : "src/DtTests.hx", lineNumber : 13, className : "DtTests", methodName : "run"});
		t.eq(dm_Dt.df(dm_Dt.add(dm_Dt.add(d,25),-25),d),0,null,{ fileName : "src/DtTests.hx", lineNumber : 14, className : "DtTests", methodName : "run"});
		t.eq(dm_Dt.df(dm_Dt.add(dm_Dt.add(d,30),-25),d),5,null,{ fileName : "src/DtTests.hx", lineNumber : 15, className : "DtTests", methodName : "run"});
		t.eq(dm_Dt.df(dm_Dt.add(dm_Dt.add(d,20),-25),d),-5,null,{ fileName : "src/DtTests.hx", lineNumber : 16, className : "DtTests", methodName : "run"});
		d = dm_Dt.mk(2,4,2010);
		t.eq(dm_Dt.to(d),"20100402",null,{ fileName : "src/DtTests.hx", lineNumber : 19, className : "DtTests", methodName : "run"});
		t.eq(dm_Dt.toIso(d),"02/04/2010",null,{ fileName : "src/DtTests.hx", lineNumber : 20, className : "DtTests", methodName : "run"});
		t.eq(dm_Dt.toEn(d),"04/02/2010",null,{ fileName : "src/DtTests.hx", lineNumber : 21, className : "DtTests", methodName : "run"});
		t.eq(dm_Dt.toIso(d,"-"),"02-04-2010",null,{ fileName : "src/DtTests.hx", lineNumber : 22, className : "DtTests", methodName : "run"});
		t.eq(dm_Dt.toEn(d,"-"),"04-02-2010",null,{ fileName : "src/DtTests.hx", lineNumber : 23, className : "DtTests", methodName : "run"});
		d = dm_Opt.get(dm_Dt.from("19881231"));
		t.eq(dm_Dt.toIso(d),"31/12/1988",null,{ fileName : "src/DtTests.hx", lineNumber : 26, className : "DtTests", methodName : "run"});
		t.eq(dm_Dt.toEn(d),"12/31/1988",null,{ fileName : "src/DtTests.hx", lineNumber : 27, className : "DtTests", methodName : "run"});
		d = dm_Opt.get(dm_Dt.fromIso("01/02/2020"));
		t.eq(dm_Dt.to(d),"20200201",null,{ fileName : "src/DtTests.hx", lineNumber : 30, className : "DtTests", methodName : "run"});
		t.eq(dm_Dt.toEn(d),"02/01/2020",null,{ fileName : "src/DtTests.hx", lineNumber : 31, className : "DtTests", methodName : "run"});
		d = dm_Opt.get(dm_Dt.fromEn("06/30/2000"));
		t.eq(dm_Dt.to(d),"20000630",null,{ fileName : "src/DtTests.hx", lineNumber : 34, className : "DtTests", methodName : "run"});
		t.eq(dm_Dt.toIso(d),"30/06/2000",null,{ fileName : "src/DtTests.hx", lineNumber : 35, className : "DtTests", methodName : "run"});
		let d1 = dm_Dt.mk(29,2,2013);
		let d2 = dm_Dt.mk(6,3,2013);
		let d3 = dm_Dt.mk(30,4,2013);
		t.eq(dm_Dt.df(d1,d2),-5,null,{ fileName : "src/DtTests.hx", lineNumber : 41, className : "DtTests", methodName : "run"});
		t.eq(dm_Dt.df(d3,d2),55,null,{ fileName : "src/DtTests.hx", lineNumber : 42, className : "DtTests", methodName : "run"});
		t.yes(dm_Dt.eq(d1,dm_Dt.add(d2,-5)),{ fileName : "src/DtTests.hx", lineNumber : 43, className : "DtTests", methodName : "run"});
		t.yes(dm_Dt.eq(d3,dm_Dt.add(d2,55)),{ fileName : "src/DtTests.hx", lineNumber : 44, className : "DtTests", methodName : "run"});
		t.yes(dm_Dt.day(d1) == 1 && dm_Dt.day(d2) == 6 && dm_Dt.day(d3) == 30,{ fileName : "src/DtTests.hx", lineNumber : 46, className : "DtTests", methodName : "run"});
		t.yes(dm_Dt.month(d1) == 3 && dm_Dt.month(d2) == 3 && dm_Dt.month(d3) == 4,{ fileName : "src/DtTests.hx", lineNumber : 47, className : "DtTests", methodName : "run"});
		t.yes(dm_Dt.year(d1) == 2013,{ fileName : "src/DtTests.hx", lineNumber : 48, className : "DtTests", methodName : "run"});
		t.yes(dm_Dt.isLeap(2020),{ fileName : "src/DtTests.hx", lineNumber : 50, className : "DtTests", methodName : "run"});
		t.yes(dm_Dt.isLeap(2000),{ fileName : "src/DtTests.hx", lineNumber : 51, className : "DtTests", methodName : "run"});
		t.yes(!dm_Dt.isLeap(2100),{ fileName : "src/DtTests.hx", lineNumber : 52, className : "DtTests", methodName : "run"});
		d = dm_Opt.get(dm_Dt.fromTime("13:12:50"));
		t.eq(dm_Dt.toTime(d),"13:12:50",null,{ fileName : "src/DtTests.hx", lineNumber : 55, className : "DtTests", methodName : "run"});
		t.eq(d.getHours(),13,null,{ fileName : "src/DtTests.hx", lineNumber : 56, className : "DtTests", methodName : "run"});
		t.eq(d.getMinutes(),12,null,{ fileName : "src/DtTests.hx", lineNumber : 57, className : "DtTests", methodName : "run"});
		t.eq(d.getSeconds(),50,null,{ fileName : "src/DtTests.hx", lineNumber : 58, className : "DtTests", methodName : "run"});
		t.eq(dm_Dt.weekDay(dm_Dt.mk(14,7,2019)),0,null,{ fileName : "src/DtTests.hx", lineNumber : 60, className : "DtTests", methodName : "run"});
		d = new Date();
		let d0 = dm_Dt.addMillis(d,0);
		d1 = dm_Dt.addMillis(d,5);
		d2 = dm_Dt.addMillis(d,-15);
		t.yes(dm_Dt.eqTime(d,d0),{ fileName : "src/DtTests.hx", lineNumber : 67, className : "DtTests", methodName : "run"});
		t.not(dm_Dt.eqTime(d,d1),{ fileName : "src/DtTests.hx", lineNumber : 68, className : "DtTests", methodName : "run"});
		t.not(dm_Dt.eqTime(d,d2),{ fileName : "src/DtTests.hx", lineNumber : 69, className : "DtTests", methodName : "run"});
		t.eq(dm_Dt.compareTime(d,d0),0,null,{ fileName : "src/DtTests.hx", lineNumber : 70, className : "DtTests", methodName : "run"});
		t.yes(dm_Dt.compareTime(d,d1) < 0,{ fileName : "src/DtTests.hx", lineNumber : 71, className : "DtTests", methodName : "run"});
		t.yes(dm_Dt.compareTime(d,d2) > 0,{ fileName : "src/DtTests.hx", lineNumber : 72, className : "DtTests", methodName : "run"});
		t.eq(dm_Dt.dfMillis(d,d0),0,null,{ fileName : "src/DtTests.hx", lineNumber : 73, className : "DtTests", methodName : "run"});
		t.eq(dm_Dt.dfMillis(d,d1),-5,null,{ fileName : "src/DtTests.hx", lineNumber : 74, className : "DtTests", methodName : "run"});
		t.eq(dm_Dt.dfMillis(d,d2),15,null,{ fileName : "src/DtTests.hx", lineNumber : 75, className : "DtTests", methodName : "run"});
		t.log();
	}
}
DtTests.__name__ = true;
class ExcTests {
	static run() {
		let t = new dm_Test("Exc");
		try {
			throw haxe_Exception.thrown(dm_Exc.illegalState("Message",{ fileName : "src/ExcTests.hx", lineNumber : 13, className : "ExcTests", methodName : "run"}));
		} catch( _g ) {
			let _g1 = haxe_Exception.caught(_g).unwrap();
			if(typeof(_g1) == "string") {
				let e = _g1;
				t.eq(dm_Exc.type(e),dm_EType.EIllegalState,null,{ fileName : "src/ExcTests.hx", lineNumber : 16, className : "ExcTests", methodName : "run"});
			} else {
				throw _g;
			}
		}
		try {
			throw haxe_Exception.thrown(dm_Exc.range(0,7,9,{ fileName : "src/ExcTests.hx", lineNumber : 20, className : "ExcTests", methodName : "run"}));
		} catch( _g ) {
			let _g1 = haxe_Exception.caught(_g).unwrap();
			if(typeof(_g1) == "string") {
				let e = _g1;
				t.eq(dm_Exc.type(e),dm_EType.ERange,null,{ fileName : "src/ExcTests.hx", lineNumber : 23, className : "ExcTests", methodName : "run"});
			} else {
				throw _g;
			}
		}
		try {
			throw haxe_Exception.thrown(dm_Exc.illegalArgument("var",5,1234,{ fileName : "src/ExcTests.hx", lineNumber : 27, className : "ExcTests", methodName : "run"}));
		} catch( _g ) {
			let _g1 = haxe_Exception.caught(_g).unwrap();
			if(typeof(_g1) == "string") {
				let e = _g1;
				t.eq(dm_Exc.type(e),dm_EType.EIllegalArgument,null,{ fileName : "src/ExcTests.hx", lineNumber : 30, className : "ExcTests", methodName : "run"});
			} else {
				throw _g;
			}
		}
		try {
			throw haxe_Exception.thrown(dm_Exc.io("File not found",{ fileName : "src/ExcTests.hx", lineNumber : 34, className : "ExcTests", methodName : "run"}));
		} catch( _g ) {
			let _g1 = haxe_Exception.caught(_g).unwrap();
			if(typeof(_g1) == "string") {
				let e = _g1;
				t.eq(dm_Exc.type(e),dm_EType.EIo,null,{ fileName : "src/ExcTests.hx", lineNumber : 37, className : "ExcTests", methodName : "run"});
			} else {
				throw _g;
			}
		}
		t.log();
	}
}
ExcTests.__name__ = true;
class HxOverrides {
	static cca(s,index) {
		let x = s.charCodeAt(index);
		if(x != x) {
			return undefined;
		}
		return x;
	}
	static substr(s,pos,len) {
		if(len == null) {
			len = s.length;
		} else if(len < 0) {
			if(pos == 0) {
				len = s.length + len;
			} else {
				return "";
			}
		}
		return s.substr(pos,len);
	}
	static now() {
		return Date.now();
	}
}
HxOverrides.__name__ = true;
class ItTests {
	static run() {
		let t = new dm_Test("It");
		t.not(dm_It.empty().hasNext(),{ fileName : "src/ItTests.hx", lineNumber : 15, className : "ItTests", methodName : "run"});
		t.eq(dm_It.empty().count(),0,null,{ fileName : "src/ItTests.hx", lineNumber : 16, className : "ItTests", methodName : "run"});
		let a = [];
		t.not(dm_It.from(a).hasNext(),{ fileName : "src/ItTests.hx", lineNumber : 19, className : "ItTests", methodName : "run"});
		t.yes(dm_It.empty().eq(dm_It.from(a)),{ fileName : "src/ItTests.hx", lineNumber : 20, className : "ItTests", methodName : "run"});
		t.eq(dm_It.from(a).count(),0,null,{ fileName : "src/ItTests.hx", lineNumber : 21, className : "ItTests", methodName : "run"});
		t.eq(dm_It.from(a).toString(),"It[]",null,{ fileName : "src/ItTests.hx", lineNumber : 22, className : "ItTests", methodName : "run"});
		t.eq(dm_It.from(a).cat(dm_It.from(a)).toString(),"It[]",null,{ fileName : "src/ItTests.hx", lineNumber : 23, className : "ItTests", methodName : "run"});
		t.eq(dm_It.from(a).push("A").toString(),"It[A]",null,{ fileName : "src/ItTests.hx", lineNumber : 24, className : "ItTests", methodName : "run"});
		t.eq(dm_It.from(a).unshift("A").toString(),"It[A]",null,{ fileName : "src/ItTests.hx", lineNumber : 25, className : "ItTests", methodName : "run"});
		t.not(dm_It.from(a).contains(""),{ fileName : "src/ItTests.hx", lineNumber : 26, className : "ItTests", methodName : "run"});
		t.eq(dm_It.from(a).index(""),-1,null,{ fileName : "src/ItTests.hx", lineNumber : 27, className : "ItTests", methodName : "run"});
		t.eq(dm_It.from(a).indexf(function(e) {
			return e == "";
		}),-1,null,{ fileName : "src/ItTests.hx", lineNumber : 28, className : "ItTests", methodName : "run"});
		t.eq(dm_It.from(a).lastIndex(""),-1,null,{ fileName : "src/ItTests.hx", lineNumber : 29, className : "ItTests", methodName : "run"});
		t.eq(dm_It.from(a).lastIndexf(function(e) {
			return e == "";
		}),-1,null,{ fileName : "src/ItTests.hx", lineNumber : 30, className : "ItTests", methodName : "run"});
		t.yes(dm_It.from(a).every(function(e) {
			return e == "a";
		}),{ fileName : "src/ItTests.hx", lineNumber : 31, className : "ItTests", methodName : "run"});
		t.not(dm_It.from(a).some(function(e) {
			return e == "a";
		}),{ fileName : "src/ItTests.hx", lineNumber : 32, className : "ItTests", methodName : "run"});
		t.eq(dm_Opt.get(dm_It.from(a).find(function(e) {
			return e == "a";
		})),null,null,{ fileName : "src/ItTests.hx", lineNumber : 33, className : "ItTests", methodName : "run"});
		t.eq(dm_Opt.get(dm_It.from(a).findLast(function(e) {
			return e == "a";
		})),null,null,{ fileName : "src/ItTests.hx", lineNumber : 34, className : "ItTests", methodName : "run"});
		t.eq(dm_It.from(a).filter(function(e) {
			return e == "a";
		}).count(),0,null,{ fileName : "src/ItTests.hx", lineNumber : 35, className : "ItTests", methodName : "run"});
		t.yes(dm_It.from(a).reverse().eq(dm_It.from(a)),{ fileName : "src/ItTests.hx", lineNumber : 36, className : "ItTests", methodName : "run"});
		t.yes(dm_It.from(a).take(2).eq(dm_It.from(a)),{ fileName : "src/ItTests.hx", lineNumber : 37, className : "ItTests", methodName : "run"});
		t.yes(dm_It.from(a).drop(2).eq(dm_It.from(a)),{ fileName : "src/ItTests.hx", lineNumber : 38, className : "ItTests", methodName : "run"});
		t.yes(dm_It.from(a).shuffle().eq(dm_It.from(a)),{ fileName : "src/ItTests.hx", lineNumber : 39, className : "ItTests", methodName : "run"});
		t.yes(dm_It.from(a).map(function(e) {
			return e;
		},function(e) {
			return ", " + e;
		}).eq(dm_It.empty()),{ fileName : "src/ItTests.hx", lineNumber : 40, className : "ItTests", methodName : "run"});
		t.yes(dm_It.split("","").eq(dm_It.from(a)),{ fileName : "src/ItTests.hx", lineNumber : 41, className : "ItTests", methodName : "run"});
		t.yes(dm_It.split("","2").eq(dm_It.from([""])),{ fileName : "src/ItTests.hx", lineNumber : 42, className : "ItTests", methodName : "run"});
		t.eq(dm_It.join(dm_It.split("",""),""),"",null,{ fileName : "src/ItTests.hx", lineNumber : 43, className : "ItTests", methodName : "run"});
		t.eq(dm_It.join(dm_It.split("","2"),"2"),"",null,{ fileName : "src/ItTests.hx", lineNumber : 44, className : "ItTests", methodName : "run"});
		a = ["zzz"];
		t.eq(dm_It.unary("zzz").toString(),"It[zzz]",null,{ fileName : "src/ItTests.hx", lineNumber : 47, className : "ItTests", methodName : "run"});
		t.not(dm_It.unary("zza") == dm_It.from(a),{ fileName : "src/ItTests.hx", lineNumber : 48, className : "ItTests", methodName : "run"});
		t.yes(dm_It.unary("zza").eq(dm_It.from(a),function(e1,e2) {
			return e1.charAt(3) == e2.charAt(3);
		}),{ fileName : "src/ItTests.hx", lineNumber : 49, className : "ItTests", methodName : "run"});
		t.eq(dm_It.from(a).count(),1,null,{ fileName : "src/ItTests.hx", lineNumber : 53, className : "ItTests", methodName : "run"});
		t.eq(dm_It.from(a).toString(),"It[zzz]",null,{ fileName : "src/ItTests.hx", lineNumber : 54, className : "ItTests", methodName : "run"});
		t.eq(dm_It.from(a).cat(dm_It.empty()).toString(),"It[zzz]",null,{ fileName : "src/ItTests.hx", lineNumber : 55, className : "ItTests", methodName : "run"});
		t.eq(dm_It.empty().cat(dm_It.from(a)).toString(),"It[zzz]",null,{ fileName : "src/ItTests.hx", lineNumber : 56, className : "ItTests", methodName : "run"});
		t.yes(dm_It.from(a).contains("zzz"),{ fileName : "src/ItTests.hx", lineNumber : 57, className : "ItTests", methodName : "run"});
		t.not(dm_It.from(a).contains("zza"),{ fileName : "src/ItTests.hx", lineNumber : 58, className : "ItTests", methodName : "run"});
		t.yes(dm_It.from(a).contains("zza",function(e1,e2) {
			return e1.charAt(3) == e2.charAt(3);
		}),{ fileName : "src/ItTests.hx", lineNumber : 59, className : "ItTests", methodName : "run"});
		t.eq(dm_It.from(a).index("zzz"),0,null,{ fileName : "src/ItTests.hx", lineNumber : 63, className : "ItTests", methodName : "run"});
		t.eq(dm_It.from(a).index("zza"),-1,null,{ fileName : "src/ItTests.hx", lineNumber : 64, className : "ItTests", methodName : "run"});
		t.eq(dm_It.from(a).index("zza",function(e1,e2) {
			return e1.charAt(1) == e2.charAt(1);
		}),0,null,{ fileName : "src/ItTests.hx", lineNumber : 65, className : "ItTests", methodName : "run"});
		t.eq(dm_It.from(a).indexf(function(e) {
			return e == "zzz";
		}),0,null,{ fileName : "src/ItTests.hx", lineNumber : 69, className : "ItTests", methodName : "run"});
		t.eq(dm_It.from(a).indexf(function(e) {
			return e == "zza";
		}),-1,null,{ fileName : "src/ItTests.hx", lineNumber : 70, className : "ItTests", methodName : "run"});
		t.eq(dm_It.from(a).indexf(function(e) {
			return e.charAt(2) == "z";
		}),0,null,{ fileName : "src/ItTests.hx", lineNumber : 71, className : "ItTests", methodName : "run"});
		t.eq(dm_It.from(a).lastIndex("zzz"),0,null,{ fileName : "src/ItTests.hx", lineNumber : 72, className : "ItTests", methodName : "run"});
		t.eq(dm_It.from(a).lastIndex("zza"),-1,null,{ fileName : "src/ItTests.hx", lineNumber : 73, className : "ItTests", methodName : "run"});
		t.eq(dm_It.from(a).lastIndex("zza",function(e1,e2) {
			return e1.charAt(1) == e2.charAt(1);
		}),0,null,{ fileName : "src/ItTests.hx", lineNumber : 74, className : "ItTests", methodName : "run"});
		t.eq(dm_It.from(a).lastIndexf(function(e) {
			return e == "zzz";
		}),0,null,{ fileName : "src/ItTests.hx", lineNumber : 78, className : "ItTests", methodName : "run"});
		t.eq(dm_It.from(a).lastIndexf(function(e) {
			return e == "zza";
		}),-1,null,{ fileName : "src/ItTests.hx", lineNumber : 79, className : "ItTests", methodName : "run"});
		t.eq(dm_It.from(a).lastIndexf(function(e) {
			return e.charAt(2) == "z";
		}),0,null,{ fileName : "src/ItTests.hx", lineNumber : 80, className : "ItTests", methodName : "run"});
		t.yes(dm_It.from(a).every(function(e) {
			return e == "zzz";
		}),{ fileName : "src/ItTests.hx", lineNumber : 81, className : "ItTests", methodName : "run"});
		t.yes(dm_It.from(a).some(function(e) {
			return e == "zzz";
		}),{ fileName : "src/ItTests.hx", lineNumber : 82, className : "ItTests", methodName : "run"});
		t.not(dm_It.from(a).every(function(e) {
			return e == "a";
		}),{ fileName : "src/ItTests.hx", lineNumber : 83, className : "ItTests", methodName : "run"});
		t.not(dm_It.from(a).some(function(e) {
			return e == "a";
		}),{ fileName : "src/ItTests.hx", lineNumber : 84, className : "ItTests", methodName : "run"});
		t.eq(dm_Opt.get(dm_It.from(a).find(function(e) {
			return e == "a";
		})),null,null,{ fileName : "src/ItTests.hx", lineNumber : 85, className : "ItTests", methodName : "run"});
		t.eq(dm_Opt.get(dm_It.from(a).findLast(function(e) {
			return e == "a";
		})),null,null,{ fileName : "src/ItTests.hx", lineNumber : 86, className : "ItTests", methodName : "run"});
		t.eq(dm_It.from(a).filter(function(e) {
			return e == "a";
		}).count(),0,null,{ fileName : "src/ItTests.hx", lineNumber : 87, className : "ItTests", methodName : "run"});
		t.eq(dm_Opt.get(dm_It.from(a).find(function(e) {
			return e == "zzz";
		})),"zzz",null,{ fileName : "src/ItTests.hx", lineNumber : 88, className : "ItTests", methodName : "run"});
		t.eq(dm_Opt.get(dm_It.from(a).findLast(function(e) {
			return e == "zzz";
		})),"zzz",null,{ fileName : "src/ItTests.hx", lineNumber : 89, className : "ItTests", methodName : "run"});
		t.eq(dm_It.from(a).filter(function(e) {
			return e == "zzz";
		}).count(),1,null,{ fileName : "src/ItTests.hx", lineNumber : 90, className : "ItTests", methodName : "run"});
		t.yes(dm_It.from(a).reverse().eq(dm_It.from(a)),{ fileName : "src/ItTests.hx", lineNumber : 91, className : "ItTests", methodName : "run"});
		t.yes(dm_It.from(a).take(2).eq(dm_It.from(a)),{ fileName : "src/ItTests.hx", lineNumber : 92, className : "ItTests", methodName : "run"});
		t.yes(dm_It.from(a).drop(2).eq(dm_It.empty()),{ fileName : "src/ItTests.hx", lineNumber : 93, className : "ItTests", methodName : "run"});
		t.yes(dm_It.from(a).shuffle().eq(dm_It.from(a)),{ fileName : "src/ItTests.hx", lineNumber : 94, className : "ItTests", methodName : "run"});
		t.yes(dm_It.from(a).map(function(e) {
			return e;
		},function(e) {
			return ", " + e;
		}).eq(dm_It.from(a)),{ fileName : "src/ItTests.hx", lineNumber : 95, className : "ItTests", methodName : "run"});
		t.yes(dm_It.split("zzz","").eq(dm_It.from(["z","z","z"])),{ fileName : "src/ItTests.hx", lineNumber : 96, className : "ItTests", methodName : "run"});
		t.yes(dm_It.split("zzz","2").eq(dm_It.from(a)),{ fileName : "src/ItTests.hx", lineNumber : 97, className : "ItTests", methodName : "run"});
		t.eq(dm_It.join(dm_It.split("zzz",""),""),"zzz",null,{ fileName : "src/ItTests.hx", lineNumber : 98, className : "ItTests", methodName : "run"});
		t.eq(dm_It.join(dm_It.split("zzz","2"),"2"),"zzz",null,{ fileName : "src/ItTests.hx", lineNumber : 99, className : "ItTests", methodName : "run"});
		a = ["a","b","c"];
		t.eq(dm_It.from(a).count(),3,null,{ fileName : "src/ItTests.hx", lineNumber : 102, className : "ItTests", methodName : "run"});
		t.eq(dm_It.from(a).toString(),"It[a,b,c]",null,{ fileName : "src/ItTests.hx", lineNumber : 103, className : "ItTests", methodName : "run"});
		t.eq(dm_It.from(a).cat(dm_It.unary("z")).toString(),"It[a,b,c,z]",null,{ fileName : "src/ItTests.hx", lineNumber : 104, className : "ItTests", methodName : "run"});
		t.eq(dm_It.unary("z").cat(dm_It.from(a)).toString(),"It[z,a,b,c]",null,{ fileName : "src/ItTests.hx", lineNumber : 105, className : "ItTests", methodName : "run"});
		t.not(dm_It.from(a).every(function(e) {
			return e == "zzz";
		}),{ fileName : "src/ItTests.hx", lineNumber : 106, className : "ItTests", methodName : "run"});
		t.not(dm_It.from(a).some(function(e) {
			return e == "zzz";
		}),{ fileName : "src/ItTests.hx", lineNumber : 107, className : "ItTests", methodName : "run"});
		t.not(dm_It.from(a).every(function(e) {
			return e == "a";
		}),{ fileName : "src/ItTests.hx", lineNumber : 108, className : "ItTests", methodName : "run"});
		t.yes(dm_It.from(a).some(function(e) {
			return e == "a";
		}),{ fileName : "src/ItTests.hx", lineNumber : 109, className : "ItTests", methodName : "run"});
		t.yes(dm_It.from(a).every(function(e) {
			return e != "zzz";
		}),{ fileName : "src/ItTests.hx", lineNumber : 110, className : "ItTests", methodName : "run"});
		t.yes(dm_It.from(a).some(function(e) {
			return e != "zzz";
		}),{ fileName : "src/ItTests.hx", lineNumber : 111, className : "ItTests", methodName : "run"});
		t.eq(dm_It.from(a).reverse().toString(),"It[c,b,a]",null,{ fileName : "src/ItTests.hx", lineNumber : 112, className : "ItTests", methodName : "run"});
		t.eq(dm_It.from(a).take(2).toString(),"It[a,b]",null,{ fileName : "src/ItTests.hx", lineNumber : 113, className : "ItTests", methodName : "run"});
		t.eq(dm_It.from(a).drop(2).toString(),"It[c]",null,{ fileName : "src/ItTests.hx", lineNumber : 114, className : "ItTests", methodName : "run"});
		t.eq(dm_It.from(a).shuffle().count(),3,null,{ fileName : "src/ItTests.hx", lineNumber : 115, className : "ItTests", methodName : "run"});
		t.yes(dm_It.from(a).map(function(e) {
			return e;
		},function(e) {
			return ", " + e;
		}).eq(dm_It.from(["a",", b",", c"])),{ fileName : "src/ItTests.hx", lineNumber : 118, className : "ItTests", methodName : "run"});
		t.yes(dm_It.split("abc","").eq(dm_It.from(a)),{ fileName : "src/ItTests.hx", lineNumber : 119, className : "ItTests", methodName : "run"});
		t.yes(dm_It.split("abc","b").eq(dm_It.from(["a","c"])),{ fileName : "src/ItTests.hx", lineNumber : 120, className : "ItTests", methodName : "run"});
		t.yes(dm_It.split("abc","c").eq(dm_It.from(["ab",""])),{ fileName : "src/ItTests.hx", lineNumber : 121, className : "ItTests", methodName : "run"});
		t.eq(dm_It.join(dm_It.split("abc","b"),"b"),"abc",null,{ fileName : "src/ItTests.hx", lineNumber : 122, className : "ItTests", methodName : "run"});
		t.eq(dm_It.join(dm_It.split("abc","c"),"c"),"abc",null,{ fileName : "src/ItTests.hx", lineNumber : 123, className : "ItTests", methodName : "run"});
		let is = [];
		t.not(dm_It.from(is).hasNext(),{ fileName : "src/ItTests.hx", lineNumber : 126, className : "ItTests", methodName : "run"});
		t.yes(dm_It.from(is).eq(dm_It.empty()),{ fileName : "src/ItTests.hx", lineNumber : 127, className : "ItTests", methodName : "run"});
		t.eq(dm_It.from(is).count(),0,null,{ fileName : "src/ItTests.hx", lineNumber : 128, className : "ItTests", methodName : "run"});
		t.eq(dm_It.from(is).toString(),"It[]",null,{ fileName : "src/ItTests.hx", lineNumber : 129, className : "ItTests", methodName : "run"});
		t.eq(dm_It.from(is).cat(dm_It.from(is)).toString(),"It[]",null,{ fileName : "src/ItTests.hx", lineNumber : 130, className : "ItTests", methodName : "run"});
		t.eq(dm_It.from(is).push(1).toString(),"It[1]",null,{ fileName : "src/ItTests.hx", lineNumber : 131, className : "ItTests", methodName : "run"});
		t.eq(dm_It.from(is).unshift(1).toString(),"It[1]",null,{ fileName : "src/ItTests.hx", lineNumber : 132, className : "ItTests", methodName : "run"});
		let sum = 0;
		dm_It.from(is).each(function(n) {
			sum += n;
		});
		t.eq(sum,0,null,{ fileName : "src/ItTests.hx", lineNumber : 135, className : "ItTests", methodName : "run"});
		let sumTx = "";
		dm_It.from(is).eachSyn(function(n,frec) {
			haxe_Timer.delay(function() {
				sumTx += "" + n;
				frec();
			},100);
		},function() {
			t.eq(sumTx,"",null,{ fileName : "src/ItTests.hx", lineNumber : 143, className : "ItTests", methodName : "run"});
		},function(e) {
			t.yes(false,{ fileName : "src/ItTests.hx", lineNumber : 144, className : "ItTests", methodName : "run"});
		});
		t.eq(dm_It.from(is).reduce(0,function(seed,n) {
			return seed + n;
		}),0,null,{ fileName : "src/ItTests.hx", lineNumber : 146, className : "ItTests", methodName : "run"});
		t.yes(dm_It.from(is).takeWhile(function(n) {
			return n < 3;
		}).eq(dm_It.from(is)),{ fileName : "src/ItTests.hx", lineNumber : 147, className : "ItTests", methodName : "run"});
		t.yes(dm_It.from(is).takeUntil(function(n) {
			return n > 2;
		}).eq(dm_It.from(is)),{ fileName : "src/ItTests.hx", lineNumber : 148, className : "ItTests", methodName : "run"});
		t.yes(dm_It.from(is).dropWhile(function(n) {
			return n < 3;
		}).eq(dm_It.from(is)),{ fileName : "src/ItTests.hx", lineNumber : 149, className : "ItTests", methodName : "run"});
		t.yes(dm_It.from(is).dropUntil(function(n) {
			return n > 2;
		}).eq(dm_It.from(is)),{ fileName : "src/ItTests.hx", lineNumber : 150, className : "ItTests", methodName : "run"});
		t.yes(dm_It.from(is).map(function(n) {
			return n * 2;
		}).eq(dm_It.from(is)),{ fileName : "src/ItTests.hx", lineNumber : 151, className : "ItTests", methodName : "run"});
		is = [3632];
		t.yes(dm_It.unary(3632).eq(dm_It.from(is)),{ fileName : "src/ItTests.hx", lineNumber : 154, className : "ItTests", methodName : "run"});
		t.eq(dm_It.from(is).count(),1,null,{ fileName : "src/ItTests.hx", lineNumber : 155, className : "ItTests", methodName : "run"});
		t.eq(dm_It.from(is).toString(),"It[3632]",null,{ fileName : "src/ItTests.hx", lineNumber : 156, className : "ItTests", methodName : "run"});
		t.eq(dm_It.from(is).cat(dm_It.empty()).toString(),"It[3632]",null,{ fileName : "src/ItTests.hx", lineNumber : 157, className : "ItTests", methodName : "run"});
		t.eq(dm_It.empty().cat(dm_It.from(is)).toString(),"It[3632]",null,{ fileName : "src/ItTests.hx", lineNumber : 158, className : "ItTests", methodName : "run"});
		t.eq(dm_It.from(is).push(1).toString(),"It[3632,1]",null,{ fileName : "src/ItTests.hx", lineNumber : 159, className : "ItTests", methodName : "run"});
		t.eq(dm_It.from(is).unshift(1).toString(),"It[1,3632]",null,{ fileName : "src/ItTests.hx", lineNumber : 160, className : "ItTests", methodName : "run"});
		sum = 0;
		dm_It.from(is).each(function(n) {
			sum += n;
		});
		t.eq(sum,3632,null,{ fileName : "src/ItTests.hx", lineNumber : 163, className : "ItTests", methodName : "run"});
		let sumTx1 = "";
		dm_It.from(is).eachSyn(function(n,frec) {
			haxe_Timer.delay(function() {
				sumTx1 += "" + n;
				frec();
			},100);
		},function() {
			t.eq(sumTx1,"3632",null,{ fileName : "src/ItTests.hx", lineNumber : 171, className : "ItTests", methodName : "run"});
		},function(e) {
			haxe_Log.trace(e,{ fileName : "src/ItTests.hx", lineNumber : 172, className : "ItTests", methodName : "run"});
		});
		t.eq(dm_It.from(is).reduce(0,function(seed,n) {
			return seed + n;
		}),3632,null,{ fileName : "src/ItTests.hx", lineNumber : 174, className : "ItTests", methodName : "run"});
		t.yes(dm_It.from(is).takeWhile(function(n) {
			return n < 3;
		}).eq(dm_It.empty()),{ fileName : "src/ItTests.hx", lineNumber : 175, className : "ItTests", methodName : "run"});
		t.yes(dm_It.from(is).takeUntil(function(n) {
			return n > 2;
		}).eq(dm_It.empty()),{ fileName : "src/ItTests.hx", lineNumber : 176, className : "ItTests", methodName : "run"});
		t.yes(dm_It.from(is).dropWhile(function(n) {
			return n < 3;
		}).eq(dm_It.from(is)),{ fileName : "src/ItTests.hx", lineNumber : 177, className : "ItTests", methodName : "run"});
		t.yes(dm_It.from(is).dropUntil(function(n) {
			return n > 2;
		}).eq(dm_It.from(is)),{ fileName : "src/ItTests.hx", lineNumber : 178, className : "ItTests", methodName : "run"});
		t.yes(dm_It.from(is).map(function(n) {
			return n * 2;
		}).eq(dm_It.from([7264])),{ fileName : "src/ItTests.hx", lineNumber : 179, className : "ItTests", methodName : "run"});
		is = [1,2,3];
		let is2 = dm_It.from(is).cat(dm_It.from(is)).to();
		t.eq(dm_It.from(is).count(),3,null,{ fileName : "src/ItTests.hx", lineNumber : 183, className : "ItTests", methodName : "run"});
		t.eq(dm_It.from(is).toString(),"It[1,2,3]",null,{ fileName : "src/ItTests.hx", lineNumber : 184, className : "ItTests", methodName : "run"});
		t.eq(dm_It.from(is).cat(dm_It.from(is)).toString(),"It[1,2,3,1,2,3]",null,{ fileName : "src/ItTests.hx", lineNumber : 185, className : "ItTests", methodName : "run"});
		sum = 0;
		dm_It.from(is).each(function(n) {
			sum += n;
		});
		t.eq(sum,6,null,{ fileName : "src/ItTests.hx", lineNumber : 188, className : "ItTests", methodName : "run"});
		let sumTx2 = "";
		dm_It.from(is).eachSyn(function(n,frec) {
			haxe_Timer.delay(function() {
				sumTx2 += "" + n;
				frec();
			},100);
		},function() {
			t.eq(sumTx2,"123",null,{ fileName : "src/ItTests.hx", lineNumber : 196, className : "ItTests", methodName : "run"});
		},function(e) {
			haxe_Log.trace(e,{ fileName : "src/ItTests.hx", lineNumber : 197, className : "ItTests", methodName : "run"});
		});
		t.eq(dm_It.from(is).reduce(0,function(seed,n) {
			return seed + n;
		}),6,null,{ fileName : "src/ItTests.hx", lineNumber : 199, className : "ItTests", methodName : "run"});
		t.yes(dm_It.from(is).map(function(n) {
			return n * 2;
		}).eq(dm_It.from([2,4,6])),{ fileName : "src/ItTests.hx", lineNumber : 200, className : "ItTests", methodName : "run"});
		t.yes(dm_It.from(is).contains(1),{ fileName : "src/ItTests.hx", lineNumber : 202, className : "ItTests", methodName : "run"});
		t.not(dm_It.from(is).contains(4),{ fileName : "src/ItTests.hx", lineNumber : 203, className : "ItTests", methodName : "run"});
		t.yes(dm_It.from(is).contains(4,function(e1,e2) {
			return e1 % 2 == e2 % 2;
		}),{ fileName : "src/ItTests.hx", lineNumber : 204, className : "ItTests", methodName : "run"});
		t.eq(dm_It.from(is2).index(1),0,null,{ fileName : "src/ItTests.hx", lineNumber : 205, className : "ItTests", methodName : "run"});
		t.eq(dm_It.from(is2).index(4),-1,null,{ fileName : "src/ItTests.hx", lineNumber : 206, className : "ItTests", methodName : "run"});
		t.eq(dm_It.from(is2).index(4,function(e1,e2) {
			return e1 % 2 == e2 % 2;
		}),1,null,{ fileName : "src/ItTests.hx", lineNumber : 207, className : "ItTests", methodName : "run"});
		t.eq(dm_It.from(is2).indexf(function(e) {
			return e == 1;
		}),0,null,{ fileName : "src/ItTests.hx", lineNumber : 208, className : "ItTests", methodName : "run"});
		t.eq(dm_It.from(is2).indexf(function(e) {
			return e == 4;
		}),-1,null,{ fileName : "src/ItTests.hx", lineNumber : 209, className : "ItTests", methodName : "run"});
		t.eq(dm_It.from(is2).indexf(function(e) {
			return e % 2 == 0;
		}),1,null,{ fileName : "src/ItTests.hx", lineNumber : 210, className : "ItTests", methodName : "run"});
		t.eq(dm_It.from(is2).lastIndex(1),3,null,{ fileName : "src/ItTests.hx", lineNumber : 211, className : "ItTests", methodName : "run"});
		t.eq(dm_It.from(is2).lastIndex(4),-1,null,{ fileName : "src/ItTests.hx", lineNumber : 212, className : "ItTests", methodName : "run"});
		t.eq(dm_It.from(is2).lastIndex(4,function(e1,e2) {
			return e1 % 2 == e2 % 2;
		}),4,null,{ fileName : "src/ItTests.hx", lineNumber : 213, className : "ItTests", methodName : "run"});
		t.eq(dm_It.from(is2).lastIndexf(function(e) {
			return e == 1;
		}),3,null,{ fileName : "src/ItTests.hx", lineNumber : 214, className : "ItTests", methodName : "run"});
		t.eq(dm_It.from(is2).lastIndexf(function(e) {
			return e == 4;
		}),-1,null,{ fileName : "src/ItTests.hx", lineNumber : 215, className : "ItTests", methodName : "run"});
		t.eq(dm_It.from(is2).lastIndexf(function(e) {
			return e % 2 == 0;
		}),4,null,{ fileName : "src/ItTests.hx", lineNumber : 216, className : "ItTests", methodName : "run"});
		t.eq(dm_Opt.get(dm_It.from(is2).find(function(e) {
			return e == 0;
		})),null,null,{ fileName : "src/ItTests.hx", lineNumber : 217, className : "ItTests", methodName : "run"});
		t.eq(dm_Opt.get(dm_It.from(is2).findLast(function(e) {
			return e == 0;
		})),null,null,{ fileName : "src/ItTests.hx", lineNumber : 218, className : "ItTests", methodName : "run"});
		t.eq(dm_It.from(is2).filter(function(e) {
			return e == 0;
		}).count(),0,null,{ fileName : "src/ItTests.hx", lineNumber : 219, className : "ItTests", methodName : "run"});
		t.eq(dm_Opt.get(dm_It.from(is2).find(function(e) {
			return e % 2 == 1;
		})),1,null,{ fileName : "src/ItTests.hx", lineNumber : 220, className : "ItTests", methodName : "run"});
		t.eq(dm_Opt.get(dm_It.from(is2).findLast(function(e) {
			return e % 2 == 1;
		})),3,null,{ fileName : "src/ItTests.hx", lineNumber : 221, className : "ItTests", methodName : "run"});
		t.eq(dm_It.from(is2).filter(function(e) {
			return e % 2 == 1;
		}).count(),4,null,{ fileName : "src/ItTests.hx", lineNumber : 222, className : "ItTests", methodName : "run"});
		t.yes(dm_It.from(is).takeWhile(function(n) {
			return n < 3;
		}).eq(dm_It.from([1,2])),{ fileName : "src/ItTests.hx", lineNumber : 223, className : "ItTests", methodName : "run"});
		t.yes(dm_It.from(is).takeUntil(function(n) {
			return n > 2;
		}).eq(dm_It.from([1,2])),{ fileName : "src/ItTests.hx", lineNumber : 224, className : "ItTests", methodName : "run"});
		t.yes(dm_It.from(is).dropWhile(function(n) {
			return n < 3;
		}).eq(dm_It.from([3])),{ fileName : "src/ItTests.hx", lineNumber : 225, className : "ItTests", methodName : "run"});
		t.yes(dm_It.from(is).dropUntil(function(n) {
			return n > 2;
		}).eq(dm_It.from([3])),{ fileName : "src/ItTests.hx", lineNumber : 226, className : "ItTests", methodName : "run"});
		t.yes(dm_It.range(0).eq(dm_It.empty()),{ fileName : "src/ItTests.hx", lineNumber : 228, className : "ItTests", methodName : "run"});
		t.yes(dm_It.range(4,4).eq(dm_It.empty()),{ fileName : "src/ItTests.hx", lineNumber : 229, className : "ItTests", methodName : "run"});
		t.yes(dm_It.range(-4,-5).eq(dm_It.empty()),{ fileName : "src/ItTests.hx", lineNumber : 230, className : "ItTests", methodName : "run"});
		t.yes(dm_It.range(3).eq(dm_It.from([0,1,2])),{ fileName : "src/ItTests.hx", lineNumber : 231, className : "ItTests", methodName : "run"});
		t.yes(dm_It.range(4,6).eq(dm_It.from([4,5])),{ fileName : "src/ItTests.hx", lineNumber : 232, className : "ItTests", methodName : "run"});
		t.yes(dm_It.range(-5,-3).eq(dm_It.from([-5,-4])),{ fileName : "src/ItTests.hx", lineNumber : 233, className : "ItTests", methodName : "run"});
		t.yes(dm_It.box([]).eq(dm_It.empty()),{ fileName : "src/ItTests.hx", lineNumber : 235, className : "ItTests", methodName : "run"});
		t.eq(dm_It.box([3]).take(2).toString(),"It[3,3]",null,{ fileName : "src/ItTests.hx", lineNumber : 236, className : "ItTests", methodName : "run"});
		let t1 = t;
		let _g = new haxe_ds_StringMap();
		_g.h["a"] = 2;
		t1.eq(dm_It.mbox(_g).take(2).toString(),"It[a,a]",null,{ fileName : "src/ItTests.hx", lineNumber : 237, className : "ItTests", methodName : "run"});
		let box = dm_It.box([3,4]).take(2).to();
		t.yes(dm_It.from(box).eq(dm_It.from([3,4])) || dm_It.from(box).eq(dm_It.from([4,3])),{ fileName : "src/ItTests.hx", lineNumber : 239, className : "ItTests", methodName : "run"});
		let _g1 = new haxe_ds_StringMap();
		_g1.h["a"] = 2;
		_g1.h["b"] = 1;
		let bx = dm_It.mbox(_g1).take(4).to();
		t.yes(dm_It.from(bx).eq(dm_It.from(["a","a","b","a"])) || dm_It.from(bx).eq(dm_It.from(["a","a","b","b"])) || dm_It.from(bx).eq(dm_It.from(["a","b","a","a"])) || dm_It.from(bx).eq(dm_It.from(["a","b","a","b"])) || dm_It.from(bx).eq(dm_It.from(["b","a","a","a"])) || dm_It.from(bx).eq(dm_It.from(["b","a","a","b"])),{ fileName : "src/ItTests.hx", lineNumber : 245, className : "ItTests", methodName : "run"});
		t.yes(dm_It.zip(dm_It.from([]),dm_It.from([2])).eq(dm_It.empty()),{ fileName : "src/ItTests.hx", lineNumber : 254, className : "ItTests", methodName : "run"});
		let tpa = dm_It.zip(dm_It.from(["a"]),dm_It.from([2])).to();
		t.eq(tpa.length,1,null,{ fileName : "src/ItTests.hx", lineNumber : 256, className : "ItTests", methodName : "run"});
		t.eq(tpa[0],new dm_Tp("a",2),dm_Tp.equals,{ fileName : "src/ItTests.hx", lineNumber : 257, className : "ItTests", methodName : "run"});
		tpa = dm_It.zip(dm_It.from(["a","b"]),dm_It.from([2])).to();
		t.eq(tpa.length,1,null,{ fileName : "src/ItTests.hx", lineNumber : 259, className : "ItTests", methodName : "run"});
		t.eq(tpa[0],new dm_Tp("a",2),dm_Tp.equals,{ fileName : "src/ItTests.hx", lineNumber : 260, className : "ItTests", methodName : "run"});
		tpa = dm_It.zip(dm_It.from(["a"]),dm_It.from([2,6])).to();
		t.eq(tpa.length,1,null,{ fileName : "src/ItTests.hx", lineNumber : 262, className : "ItTests", methodName : "run"});
		t.eq(tpa[0],new dm_Tp("a",2),dm_Tp.equals,{ fileName : "src/ItTests.hx", lineNumber : 263, className : "ItTests", methodName : "run"});
		t.yes(dm_It.zip3(dm_It.from([]),dm_It.from([2]),dm_It.from([3,4])).eq(dm_It.empty()),{ fileName : "src/ItTests.hx", lineNumber : 265, className : "ItTests", methodName : "run"});
		let tpa3 = dm_It.zip3(dm_It.from(["a"]),dm_It.from([2]),dm_It.from([3])).to();
		t.eq(tpa3.length,1,null,{ fileName : "src/ItTests.hx", lineNumber : 267, className : "ItTests", methodName : "run"});
		t.eq(tpa3[0],new dm_Tp3("a",2,3),dm_Tp3.equals,{ fileName : "src/ItTests.hx", lineNumber : 268, className : "ItTests", methodName : "run"});
		tpa3 = dm_It.zip3(dm_It.from(["a","b","c"]),dm_It.from([2]),dm_It.from([3])).to();
		t.eq(tpa3.length,1,null,{ fileName : "src/ItTests.hx", lineNumber : 270, className : "ItTests", methodName : "run"});
		t.eq(tpa3[0],new dm_Tp3("a",2,3),dm_Tp3.equals,{ fileName : "src/ItTests.hx", lineNumber : 271, className : "ItTests", methodName : "run"});
		tpa3 = dm_It.zip3(dm_It.from(["a"]),dm_It.from([2,7]),dm_It.from([3])).to();
		t.eq(tpa3.length,1,null,{ fileName : "src/ItTests.hx", lineNumber : 273, className : "ItTests", methodName : "run"});
		t.eq(tpa3[0],new dm_Tp3("a",2,3),dm_Tp3.equals,{ fileName : "src/ItTests.hx", lineNumber : 274, className : "ItTests", methodName : "run"});
		tpa3 = dm_It.zip3(dm_It.from(["a"]),dm_It.from([2]),dm_It.from([3,20,12])).to();
		t.eq(tpa3.length,1,null,{ fileName : "src/ItTests.hx", lineNumber : 276, className : "ItTests", methodName : "run"});
		t.eq(tpa3[0],new dm_Tp3("a",2,3),dm_Tp3.equals,{ fileName : "src/ItTests.hx", lineNumber : 277, className : "ItTests", methodName : "run"});
		let _g2 = new haxe_ds_StringMap();
		_g2.h["a"] = 1;
		_g2.h["b"] = 2;
		let m1 = _g2;
		let m2 = dm_Opt.get(dm_It.fromMap(m1).toMap());
		t.eq(m2.h["a"],1,null,{ fileName : "src/ItTests.hx", lineNumber : 281, className : "ItTests", methodName : "run"});
		t.eq(m2.h["b"],2,null,{ fileName : "src/ItTests.hx", lineNumber : 282, className : "ItTests", methodName : "run"});
		t.log();
	}
}
ItTests.__name__ = true;
class _$JsTests_Tst {
	constructor(s,i) {
		this.i2 = 0;
		this.s = s;
		this.i = i;
	}
	setI2(n) {
		this.i2 = n;
	}
	getI2() {
		return this.i2;
	}
	static toJs(t) {
		return dm_Js.wa([dm_Js.ws(t.s),dm_Js.wi(t.i),dm_Js.wi(t.i2)]);
	}
	static fromJs(js) {
		let a = js.ra();
		let s = a[0].rs();
		let i = a[1].ri();
		let i2 = a[2].ri();
		let r = new _$JsTests_Tst(s,i);
		r.i2 = i2;
		return r;
	}
}
_$JsTests_Tst.__name__ = true;
Object.assign(_$JsTests_Tst.prototype, {
	__class__: _$JsTests_Tst
});
class JsTests {
	static run() {
		let t = new dm_Test("Js");
		t.yes(dm_Js.from(dm_Js.wn().to()).isNull(),{ fileName : "src/JsTests.hx", lineNumber : 48, className : "JsTests", methodName : "run"});
		t.eq(dm_Js.from(dm_Js.wb(true).to()).rb(),true,null,{ fileName : "src/JsTests.hx", lineNumber : 49, className : "JsTests", methodName : "run"});
		t.eq(dm_Js.wb(true).to(),"true",null,{ fileName : "src/JsTests.hx", lineNumber : 50, className : "JsTests", methodName : "run"});
		t.eq(dm_Js.from(dm_Js.wb(false).to()).rb(),false,null,{ fileName : "src/JsTests.hx", lineNumber : 51, className : "JsTests", methodName : "run"});
		t.eq(dm_Js.wb(false).to(),"false",null,{ fileName : "src/JsTests.hx", lineNumber : 52, className : "JsTests", methodName : "run"});
		t.eq(dm_Js.from(dm_Js.wi(12).to()).ri(),12,null,{ fileName : "src/JsTests.hx", lineNumber : 53, className : "JsTests", methodName : "run"});
		t.eq(dm_Js.wi(12).to(),"12",null,{ fileName : "src/JsTests.hx", lineNumber : 54, className : "JsTests", methodName : "run"});
		t.eq(dm_Js.from(dm_Js.wf(12.34).to()).rf(),12.34,null,{ fileName : "src/JsTests.hx", lineNumber : 55, className : "JsTests", methodName : "run"});
		t.eq(dm_Js.wf(12.34).to(),"12.34",null,{ fileName : "src/JsTests.hx", lineNumber : 56, className : "JsTests", methodName : "run"});
		t.eq(dm_Js.from(dm_Js.ws("\"Cañón\"").to()).rs(),"\"Cañón\"",null,{ fileName : "src/JsTests.hx", lineNumber : 57, className : "JsTests", methodName : "run"});
		t.eq(dm_Js.ws("\"Cañón\"").to(),"\"\\\"Cañón\\\"\"",null,{ fileName : "src/JsTests.hx", lineNumber : 58, className : "JsTests", methodName : "run"});
		let a = dm_Js.wa([dm_Js.wb(true),dm_Js.wi(3)]).ra();
		t.eq(a[0].rb(),true,null,{ fileName : "src/JsTests.hx", lineNumber : 60, className : "JsTests", methodName : "run"});
		t.eq(a[1].ri(),3,null,{ fileName : "src/JsTests.hx", lineNumber : 61, className : "JsTests", methodName : "run"});
		t.eq(dm_Js.wa([dm_Js.wb(true),dm_Js.wi(3)]).to(),"[true,3]",null,{ fileName : "src/JsTests.hx", lineNumber : 62, className : "JsTests", methodName : "run"});
		let _g = new haxe_ds_StringMap();
		let value = dm_Js.wb(true);
		_g.h["a"] = value;
		let value1 = dm_Js.wi(3);
		_g.h["b"] = value1;
		let o = dm_Js.from(dm_Js.wo(_g).to()).ro();
		t.eq(o.h["a"].rb(),true,null,{ fileName : "src/JsTests.hx", lineNumber : 64, className : "JsTests", methodName : "run"});
		t.eq(o.h["b"].ri(),3,null,{ fileName : "src/JsTests.hx", lineNumber : 65, className : "JsTests", methodName : "run"});
		let _g1 = new haxe_ds_StringMap();
		let value2 = dm_Js.wb(true);
		_g1.h["a"] = value2;
		let value3 = dm_Js.wi(3);
		_g1.h["b"] = value3;
		let r = dm_Js.wo(_g1).to();
		t.eq(r,r.startsWith("{\"a") ? "{\"a\":true,\"b\":3}" : "{\"b\":3,\"a\":true}",null,{ fileName : "src/JsTests.hx", lineNumber : 67, className : "JsTests", methodName : "run"});
		let tst = new _$JsTests_Tst("a",2);
		tst.setI2(4);
		let tst2 = _$JsTests_Tst.fromJs(dm_Js.from(_$JsTests_Tst.toJs(tst).to()));
		t.eq(tst.s,tst2.s,null,{ fileName : "src/JsTests.hx", lineNumber : 75, className : "JsTests", methodName : "run"});
		t.eq(tst.i,tst2.i,null,{ fileName : "src/JsTests.hx", lineNumber : 76, className : "JsTests", methodName : "run"});
		t.eq(tst.getI2(),tst2.getI2(),null,{ fileName : "src/JsTests.hx", lineNumber : 77, className : "JsTests", methodName : "run"});
		let tstb = new _$JsTests_Tst("b",22);
		tstb.setI2(44);
		let a2 = dm_Js.from(dm_Js.wArray([tst,tstb],_$JsTests_Tst.toJs).to()).rArray(_$JsTests_Tst.fromJs);
		tst2 = a2[0];
		let tstb2 = a2[1];
		t.eq(tst.s,tst2.s,null,{ fileName : "src/JsTests.hx", lineNumber : 86, className : "JsTests", methodName : "run"});
		t.eq(tst.i,tst2.i,null,{ fileName : "src/JsTests.hx", lineNumber : 87, className : "JsTests", methodName : "run"});
		t.eq(tst.getI2(),tst2.getI2(),null,{ fileName : "src/JsTests.hx", lineNumber : 88, className : "JsTests", methodName : "run"});
		t.eq(tstb.s,tstb2.s,null,{ fileName : "src/JsTests.hx", lineNumber : 89, className : "JsTests", methodName : "run"});
		t.eq(tstb.i,tstb2.i,null,{ fileName : "src/JsTests.hx", lineNumber : 90, className : "JsTests", methodName : "run"});
		t.eq(tstb.getI2(),tstb2.getI2(),null,{ fileName : "src/JsTests.hx", lineNumber : 91, className : "JsTests", methodName : "run"});
		let _g2 = new haxe_ds_StringMap();
		_g2.h["a"] = tst;
		_g2.h["b"] = tstb;
		let m = dm_Js.from(dm_Js.wMap(_g2,_$JsTests_Tst.toJs).to()).rMap(_$JsTests_Tst.fromJs);
		tst2 = m.h["a"];
		tstb2 = m.h["b"];
		t.eq(tst.s,tst2.s,null,{ fileName : "src/JsTests.hx", lineNumber : 97, className : "JsTests", methodName : "run"});
		t.eq(tst.i,tst2.i,null,{ fileName : "src/JsTests.hx", lineNumber : 98, className : "JsTests", methodName : "run"});
		t.eq(tst.getI2(),tst2.getI2(),null,{ fileName : "src/JsTests.hx", lineNumber : 99, className : "JsTests", methodName : "run"});
		t.eq(tstb.s,tstb2.s,null,{ fileName : "src/JsTests.hx", lineNumber : 100, className : "JsTests", methodName : "run"});
		t.eq(tstb.i,tstb2.i,null,{ fileName : "src/JsTests.hx", lineNumber : 101, className : "JsTests", methodName : "run"});
		t.eq(tstb.getI2(),tstb2.getI2(),null,{ fileName : "src/JsTests.hx", lineNumber : 102, className : "JsTests", methodName : "run"});
		t.log();
	}
}
JsTests.__name__ = true;
Math.__name__ = true;
class OptTests {
	static run() {
		let t = new dm_Test("Opt");
		let n = dm_Option.None;
		let s = dm_Option.Some(2);
		t.eq(dm_Opt.get(n),null,null,{ fileName : "src/OptTests.hx", lineNumber : 13, className : "OptTests", methodName : "run"});
		t.eq(dm_Opt.get(s),2,null,{ fileName : "src/OptTests.hx", lineNumber : 14, className : "OptTests", methodName : "run"});
		t.eq(dm_Opt.oget(n,4),4,null,{ fileName : "src/OptTests.hx", lineNumber : 16, className : "OptTests", methodName : "run"});
		t.eq(dm_Opt.oget(s,4),2,null,{ fileName : "src/OptTests.hx", lineNumber : 17, className : "OptTests", methodName : "run"});
		t.eq(dm_Opt.eget(s),2,null,{ fileName : "src/OptTests.hx", lineNumber : 20, className : "OptTests", methodName : "run"});
		t.eq(dm_Opt.fmap(dm_Option.None,function(x) {
			return x * 2;
		}),dm_Option.None,null,{ fileName : "src/OptTests.hx", lineNumber : 22, className : "OptTests", methodName : "run"});
		t.eq(dm_Opt.get(dm_Opt.fmap(dm_Option.Some(4),function(x) {
			return x * 2;
		})),8,null,{ fileName : "src/OptTests.hx", lineNumber : 23, className : "OptTests", methodName : "run"});
		t.eq(dm_Opt.bind(dm_Option.Some(4),function(x) {
			return dm_Option.None;
		}),dm_Option.None,null,{ fileName : "src/OptTests.hx", lineNumber : 25, className : "OptTests", methodName : "run"});
		t.eq(dm_Opt.get(dm_Opt.bind(dm_Option.Some(4),function(x) {
			return dm_Option.Some(x * 2);
		})),8,null,{ fileName : "src/OptTests.hx", lineNumber : 26, className : "OptTests", methodName : "run"});
		t.log();
	}
}
OptTests.__name__ = true;
class PathTests {
	static run() {
		let t = new dm_Test("Path");
		t.eq(dm_Path.name(""),"",null,{ fileName : "src/PathTests.hx", lineNumber : 11, className : "PathTests", methodName : "run"});
		t.eq(dm_Path.name("/"),"",null,{ fileName : "src/PathTests.hx", lineNumber : 12, className : "PathTests", methodName : "run"});
		t.eq(dm_Path.name("ab"),"ab",null,{ fileName : "src/PathTests.hx", lineNumber : 13, className : "PathTests", methodName : "run"});
		t.eq(dm_Path.name("/ab.c"),"ab.c",null,{ fileName : "src/PathTests.hx", lineNumber : 14, className : "PathTests", methodName : "run"});
		t.eq(dm_Path.name("cd/"),"",null,{ fileName : "src/PathTests.hx", lineNumber : 15, className : "PathTests", methodName : "run"});
		t.eq(dm_Path.name("c/ab.c"),"ab.c",null,{ fileName : "src/PathTests.hx", lineNumber : 16, className : "PathTests", methodName : "run"});
		t.eq(dm_Path.parent(""),"",null,{ fileName : "src/PathTests.hx", lineNumber : 18, className : "PathTests", methodName : "run"});
		t.eq(dm_Path.parent("/"),"",null,{ fileName : "src/PathTests.hx", lineNumber : 19, className : "PathTests", methodName : "run"});
		t.eq(dm_Path.parent("ab"),"",null,{ fileName : "src/PathTests.hx", lineNumber : 20, className : "PathTests", methodName : "run"});
		t.eq(dm_Path.parent("/ab.c"),"",null,{ fileName : "src/PathTests.hx", lineNumber : 21, className : "PathTests", methodName : "run"});
		t.eq(dm_Path.parent("cd/"),"cd",null,{ fileName : "src/PathTests.hx", lineNumber : 22, className : "PathTests", methodName : "run"});
		t.eq(dm_Path.parent("cg/r/ab.c"),"cg/r",null,{ fileName : "src/PathTests.hx", lineNumber : 23, className : "PathTests", methodName : "run"});
		t.eq(dm_Path.extension(""),"",null,{ fileName : "src/PathTests.hx", lineNumber : 25, className : "PathTests", methodName : "run"});
		t.eq(dm_Path.extension("/"),"",null,{ fileName : "src/PathTests.hx", lineNumber : 26, className : "PathTests", methodName : "run"});
		t.eq(dm_Path.extension("ab"),"",null,{ fileName : "src/PathTests.hx", lineNumber : 27, className : "PathTests", methodName : "run"});
		t.eq(dm_Path.extension("/ab.c"),".c",null,{ fileName : "src/PathTests.hx", lineNumber : 28, className : "PathTests", methodName : "run"});
		t.eq(dm_Path.extension("cd/."),".",null,{ fileName : "src/PathTests.hx", lineNumber : 29, className : "PathTests", methodName : "run"});
		t.eq(dm_Path.extension("cg/r/ab."),".",null,{ fileName : "src/PathTests.hx", lineNumber : 30, className : "PathTests", methodName : "run"});
		t.eq(dm_Path.onlyName(""),"",null,{ fileName : "src/PathTests.hx", lineNumber : 32, className : "PathTests", methodName : "run"});
		t.eq(dm_Path.onlyName("/"),"",null,{ fileName : "src/PathTests.hx", lineNumber : 33, className : "PathTests", methodName : "run"});
		t.eq(dm_Path.onlyName("ab"),"ab",null,{ fileName : "src/PathTests.hx", lineNumber : 34, className : "PathTests", methodName : "run"});
		t.eq(dm_Path.onlyName("/ab.c"),"ab",null,{ fileName : "src/PathTests.hx", lineNumber : 35, className : "PathTests", methodName : "run"});
		t.eq(dm_Path.onlyName("cd/."),"",null,{ fileName : "src/PathTests.hx", lineNumber : 36, className : "PathTests", methodName : "run"});
		t.eq(dm_Path.onlyName("cg/r/ab."),"ab",null,{ fileName : "src/PathTests.hx", lineNumber : 37, className : "PathTests", methodName : "run"});
		let p1 = "1";
		t.eq(dm_Path.cat([]),"",null,{ fileName : "src/PathTests.hx", lineNumber : 41, className : "PathTests", methodName : "run"});
		t.eq(dm_Path.cat([p1]),"1",null,{ fileName : "src/PathTests.hx", lineNumber : 42, className : "PathTests", methodName : "run"});
		t.eq(dm_Path.cat([p1,"ab","ab","cd"]),"1/ab/ab/cd",null,{ fileName : "src/PathTests.hx", lineNumber : 43, className : "PathTests", methodName : "run"});
		t.eq(dm_Path.cat(["/a","b"]),"/a/b",null,{ fileName : "src/PathTests.hx", lineNumber : 44, className : "PathTests", methodName : "run"});
		t.eq(dm_Path.normalize("/usr//local/..//lib"),"/usr/lib",null,{ fileName : "src/PathTests.hx", lineNumber : 46, className : "PathTests", methodName : "run"});
		t.log();
	}
}
PathTests.__name__ = true;
class RndTests {
	static run() {
		let t = new dm_Test("Rnd");
		dm_It.range(10).each(function(i) {
			t.yes(dm_Rnd.i(4) >= 0 && dm_Rnd.i(4) < 4,{ fileName : "src/RndTests.hx", lineNumber : 14, className : "RndTests", methodName : "run"});
		});
		dm_It.range(10).each(function(i) {
			t.yes(dm_Rnd.f(2,4,0) >= 0 && dm_Rnd.f(2,4,0) <= 4,{ fileName : "src/RndTests.hx", lineNumber : 18, className : "RndTests", methodName : "run"});
		});
		dm_It.range(10).each(function(i) {
			t.yes(dm_Rnd.f(4,8,0) >= 4 && dm_Rnd.f(4,8,0) <= 8,{ fileName : "src/RndTests.hx", lineNumber : 24, className : "RndTests", methodName : "run"});
		});
		let box = new dm_Box(["a","b","c"]);
		let v = box.next();
		t.yes(v == "a" || v == "b" || v == "c",{ fileName : "src/RndTests.hx", lineNumber : 31, className : "RndTests", methodName : "run"});
		let v2 = box.next();
		t.yes(v != v2,{ fileName : "src/RndTests.hx", lineNumber : 33, className : "RndTests", methodName : "run"});
		t.yes(v2 == "a" || v2 == "b" || v2 == "c",{ fileName : "src/RndTests.hx", lineNumber : 34, className : "RndTests", methodName : "run"});
		let v3 = box.next();
		t.yes(v3 != v2 && v3 != v,{ fileName : "src/RndTests.hx", lineNumber : 36, className : "RndTests", methodName : "run"});
		t.yes(v3 == "a" || v3 == "b" || v3 == "c",{ fileName : "src/RndTests.hx", lineNumber : 37, className : "RndTests", methodName : "run"});
		v = box.next();
		t.yes(v == "a" || v == "b" || v == "c",{ fileName : "src/RndTests.hx", lineNumber : 39, className : "RndTests", methodName : "run"});
		v = box.next();
		t.yes(v == "a" || v == "b" || v == "c",{ fileName : "src/RndTests.hx", lineNumber : 41, className : "RndTests", methodName : "run"});
		v = box.next();
		t.yes(v == "a" || v == "b" || v == "c",{ fileName : "src/RndTests.hx", lineNumber : 43, className : "RndTests", methodName : "run"});
		v = box.next();
		t.yes(v == "a" || v == "b" || v == "c",{ fileName : "src/RndTests.hx", lineNumber : 45, className : "RndTests", methodName : "run"});
		box = dm_Rnd.mkBox([new dm_Tp("a",2),new dm_Tp("b",1)]);
		v = box.next();
		t.yes(v == "a" || v == "b",{ fileName : "src/RndTests.hx", lineNumber : 49, className : "RndTests", methodName : "run"});
		v = box.next();
		t.yes(v == "a" || v == "b",{ fileName : "src/RndTests.hx", lineNumber : 51, className : "RndTests", methodName : "run"});
		v = box.next();
		t.yes(v == "a" || v == "b",{ fileName : "src/RndTests.hx", lineNumber : 53, className : "RndTests", methodName : "run"});
		v = box.next();
		t.yes(v == "a" || v == "b",{ fileName : "src/RndTests.hx", lineNumber : 55, className : "RndTests", methodName : "run"});
		v = box.next();
		t.yes(v == "a" || v == "b",{ fileName : "src/RndTests.hx", lineNumber : 57, className : "RndTests", methodName : "run"});
		v = box.next();
		t.yes(v == "a" || v == "b",{ fileName : "src/RndTests.hx", lineNumber : 59, className : "RndTests", methodName : "run"});
		v = box.next();
		t.yes(v == "a" || v == "b",{ fileName : "src/RndTests.hx", lineNumber : 61, className : "RndTests", methodName : "run"});
		t.log();
	}
}
RndTests.__name__ = true;
class RsTests {
	static run() {
		let eq = function(r1,r2) {
			switch(r1._hx_index) {
			case 0:
				let v1 = r1.v;
				if(r2._hx_index == 0) {
					let v2 = r2.v;
					return v1 == v2;
				} else {
					return false;
				}
				break;
			case 1:
				let e1 = r1.s;
				if(r2._hx_index == 1) {
					let e2 = r2.s;
					return e1 == e2;
				} else {
					return false;
				}
				break;
			}
		};
		let t = new dm_Test("Rs");
		let err = dm_Result.Error("err");
		let ok = dm_Result.Ok(2);
		t.eq(dm_Rs.fmap(err,function(x) {
			return x * 22;
		}),dm_Result.Error("err"),eq,{ fileName : "src/RsTests.hx", lineNumber : 25, className : "RsTests", methodName : "run"});
		t.eq(dm_Rs.fmap(ok,function(x) {
			return x * 22;
		}),dm_Result.Ok(44),eq,{ fileName : "src/RsTests.hx", lineNumber : 26, className : "RsTests", methodName : "run"});
		t.eq(dm_Rs.bind(err,function(x) {
			return dm_Result.Ok(x * 22);
		}),dm_Result.Error("err"),eq,{ fileName : "src/RsTests.hx", lineNumber : 28, className : "RsTests", methodName : "run"});
		t.eq(dm_Rs.bind(err,function(x) {
			return dm_Result.Error("e2");
		}),dm_Result.Error("err"),eq,{ fileName : "src/RsTests.hx", lineNumber : 29, className : "RsTests", methodName : "run"});
		t.eq(dm_Rs.bind(ok,function(x) {
			return dm_Result.Error("e2");
		}),dm_Result.Error("e2"),eq,{ fileName : "src/RsTests.hx", lineNumber : 30, className : "RsTests", methodName : "run"});
		t.eq(dm_Rs.bind(ok,function(x) {
			return dm_Result.Ok(x * 22);
		}),dm_Result.Ok(44),eq,{ fileName : "src/RsTests.hx", lineNumber : 31, className : "RsTests", methodName : "run"});
		t.log();
	}
}
RsTests.__name__ = true;
class Std {
	static string(s) {
		return js_Boot.__string_rec(s,"");
	}
	static parseInt(x) {
		if(x != null) {
			let _g = 0;
			let _g1 = x.length;
			while(_g < _g1) {
				let i = _g++;
				let c = x.charCodeAt(i);
				if(c <= 8 || c >= 14 && c != 32 && c != 45) {
					let nc = x.charCodeAt(i + 1);
					let v = parseInt(x,nc == 120 || nc == 88 ? 16 : 10);
					if(isNaN(v)) {
						return null;
					} else {
						return v;
					}
				}
			}
		}
		return null;
	}
	static random(x) {
		if(x <= 0) {
			return 0;
		} else {
			return Math.floor(Math.random() * x);
		}
	}
}
Std.__name__ = true;
class StrTests {
	static run() {
		let t = new dm_Test("Str");
		t.eq(StringTools.trim("  "),"",null,{ fileName : "src/StrTests.hx", lineNumber : 14, className : "StrTests", methodName : "run"});
		t.eq(StringTools.trim(" a"),"a",null,{ fileName : "src/StrTests.hx", lineNumber : 15, className : "StrTests", methodName : "run"});
		t.eq(StringTools.trim("a   "),"a",null,{ fileName : "src/StrTests.hx", lineNumber : 16, className : "StrTests", methodName : "run"});
		t.eq(StringTools.trim("\na\t\t"),"a",null,{ fileName : "src/StrTests.hx", lineNumber : 17, className : "StrTests", methodName : "run"});
		t.eq(StringTools.trim(" \na n c\t\t "),"a n c",null,{ fileName : "src/StrTests.hx", lineNumber : 18, className : "StrTests", methodName : "run"});
		t.eq("",StringTools.trim(" \n\t "),null,{ fileName : "src/StrTests.hx", lineNumber : 20, className : "StrTests", methodName : "run"});
		t.eq("",StringTools.ltrim(" \n\t "),null,{ fileName : "src/StrTests.hx", lineNumber : 21, className : "StrTests", methodName : "run"});
		t.eq("",StringTools.rtrim(" \n\t "),null,{ fileName : "src/StrTests.hx", lineNumber : 22, className : "StrTests", methodName : "run"});
		t.eq("abc",StringTools.trim(" \nabc\t "),null,{ fileName : "src/StrTests.hx", lineNumber : 24, className : "StrTests", methodName : "run"});
		t.eq("abc\t ",StringTools.ltrim(" \nabc\t "),null,{ fileName : "src/StrTests.hx", lineNumber : 25, className : "StrTests", methodName : "run"});
		t.eq(" \nabc",StringTools.rtrim(" \nabc\t "),null,{ fileName : "src/StrTests.hx", lineNumber : 26, className : "StrTests", methodName : "run"});
		t.yes("".startsWith(""),{ fileName : "src/StrTests.hx", lineNumber : 28, className : "StrTests", methodName : "run"});
		t.yes("abc".startsWith(""),{ fileName : "src/StrTests.hx", lineNumber : 29, className : "StrTests", methodName : "run"});
		t.yes(!"".startsWith("abc"),{ fileName : "src/StrTests.hx", lineNumber : 30, className : "StrTests", methodName : "run"});
		t.yes("abc".startsWith("a"),{ fileName : "src/StrTests.hx", lineNumber : 31, className : "StrTests", methodName : "run"});
		t.yes("abc".startsWith("abc"),{ fileName : "src/StrTests.hx", lineNumber : 32, className : "StrTests", methodName : "run"});
		t.yes(!"abc".startsWith("b"),{ fileName : "src/StrTests.hx", lineNumber : 33, className : "StrTests", methodName : "run"});
		t.yes("".endsWith(""),{ fileName : "src/StrTests.hx", lineNumber : 35, className : "StrTests", methodName : "run"});
		t.yes("abc".endsWith(""),{ fileName : "src/StrTests.hx", lineNumber : 36, className : "StrTests", methodName : "run"});
		t.yes(!"".endsWith("abc"),{ fileName : "src/StrTests.hx", lineNumber : 37, className : "StrTests", methodName : "run"});
		t.yes("abc".endsWith("c"),{ fileName : "src/StrTests.hx", lineNumber : 38, className : "StrTests", methodName : "run"});
		t.yes("abc".endsWith("abc"),{ fileName : "src/StrTests.hx", lineNumber : 39, className : "StrTests", methodName : "run"});
		t.yes(!"abc".endsWith("b"),{ fileName : "src/StrTests.hx", lineNumber : 40, className : "StrTests", methodName : "run"});
		let arr = ["pérez","pera","p zarra","pizarra"];
		let arr2 = dm_It.from(arr).sort(dm_Str.compare).to();
		t.eq(["p zarra","pera","pizarra","pérez"].toString(),arr2.toString(),null,{ fileName : "src/StrTests.hx", lineNumber : 44, className : "StrTests", methodName : "run"});
		arr2 = dm_It.from(arr).sort(dm_Str.localeCompare).to();
		t.eq(["p zarra","pera","pérez","pizarra"].toString(),arr2.toString(),null,{ fileName : "src/StrTests.hx", lineNumber : 46, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.cutLeft("",3),"",null,{ fileName : "src/StrTests.hx", lineNumber : 48, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.cutLeft("ab",3),"ab",null,{ fileName : "src/StrTests.hx", lineNumber : 49, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.cutLeft("abcde",4),"...e",null,{ fileName : "src/StrTests.hx", lineNumber : 50, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.cutLeft("abcd",3),"...",null,{ fileName : "src/StrTests.hx", lineNumber : 51, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.cutLeft("abcd",1),"...",null,{ fileName : "src/StrTests.hx", lineNumber : 52, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.cutRight("",3),"",null,{ fileName : "src/StrTests.hx", lineNumber : 54, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.cutRight("ab",3),"ab",null,{ fileName : "src/StrTests.hx", lineNumber : 55, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.cutRight("abcde",4),"a...",null,{ fileName : "src/StrTests.hx", lineNumber : 56, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.cutRight("abcd",3),"...",null,{ fileName : "src/StrTests.hx", lineNumber : 57, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.cutRight("abcd",1),"...",null,{ fileName : "src/StrTests.hx", lineNumber : 58, className : "StrTests", methodName : "run"});
		t.eq(StringTools.htmlEscape("a'bc<",false),"a'bc&lt;",null,{ fileName : "src/StrTests.hx", lineNumber : 60, className : "StrTests", methodName : "run"});
		t.yes(!dm_Str.isSpace(""),{ fileName : "src/StrTests.hx", lineNumber : 62, className : "StrTests", methodName : "run"});
		t.yes(dm_Str.isSpace(" "),{ fileName : "src/StrTests.hx", lineNumber : 63, className : "StrTests", methodName : "run"});
		t.yes(!dm_Str.isSpace("v"),{ fileName : "src/StrTests.hx", lineNumber : 64, className : "StrTests", methodName : "run"});
		t.yes(!dm_Str.isSpace("_"),{ fileName : "src/StrTests.hx", lineNumber : 65, className : "StrTests", methodName : "run"});
		t.yes(!dm_Str.isSpace("2"),{ fileName : "src/StrTests.hx", lineNumber : 66, className : "StrTests", methodName : "run"});
		t.yes(!dm_Str.isSpace("."),{ fileName : "src/StrTests.hx", lineNumber : 67, className : "StrTests", methodName : "run"});
		t.yes(!dm_Str.isSpace("v-"),{ fileName : "src/StrTests.hx", lineNumber : 68, className : "StrTests", methodName : "run"});
		t.yes(!dm_Str.isSpace("_-"),{ fileName : "src/StrTests.hx", lineNumber : 69, className : "StrTests", methodName : "run"});
		t.yes(!dm_Str.isSpace("2-"),{ fileName : "src/StrTests.hx", lineNumber : 70, className : "StrTests", methodName : "run"});
		t.yes(!dm_Str.isSpace(".-"),{ fileName : "src/StrTests.hx", lineNumber : 71, className : "StrTests", methodName : "run"});
		t.yes(!dm_Str.isLetter(""),{ fileName : "src/StrTests.hx", lineNumber : 73, className : "StrTests", methodName : "run"});
		t.yes(!dm_Str.isLetter(" "),{ fileName : "src/StrTests.hx", lineNumber : 74, className : "StrTests", methodName : "run"});
		t.yes(dm_Str.isLetter("v"),{ fileName : "src/StrTests.hx", lineNumber : 75, className : "StrTests", methodName : "run"});
		t.yes(dm_Str.isLetter("_"),{ fileName : "src/StrTests.hx", lineNumber : 76, className : "StrTests", methodName : "run"});
		t.yes(!dm_Str.isLetter("2"),{ fileName : "src/StrTests.hx", lineNumber : 77, className : "StrTests", methodName : "run"});
		t.yes(!dm_Str.isLetter("."),{ fileName : "src/StrTests.hx", lineNumber : 78, className : "StrTests", methodName : "run"});
		t.yes(dm_Str.isLetter("v-"),{ fileName : "src/StrTests.hx", lineNumber : 79, className : "StrTests", methodName : "run"});
		t.yes(dm_Str.isLetter("_-"),{ fileName : "src/StrTests.hx", lineNumber : 80, className : "StrTests", methodName : "run"});
		t.yes(!dm_Str.isLetter("2-"),{ fileName : "src/StrTests.hx", lineNumber : 81, className : "StrTests", methodName : "run"});
		t.yes(!dm_Str.isLetter(".-"),{ fileName : "src/StrTests.hx", lineNumber : 82, className : "StrTests", methodName : "run"});
		t.yes(!dm_Str.isDigit(""),{ fileName : "src/StrTests.hx", lineNumber : 84, className : "StrTests", methodName : "run"});
		t.yes(!dm_Str.isDigit(" "),{ fileName : "src/StrTests.hx", lineNumber : 85, className : "StrTests", methodName : "run"});
		t.yes(!dm_Str.isDigit("v"),{ fileName : "src/StrTests.hx", lineNumber : 86, className : "StrTests", methodName : "run"});
		t.yes(!dm_Str.isDigit("_"),{ fileName : "src/StrTests.hx", lineNumber : 87, className : "StrTests", methodName : "run"});
		t.yes(dm_Str.isDigit("2"),{ fileName : "src/StrTests.hx", lineNumber : 88, className : "StrTests", methodName : "run"});
		t.yes(!dm_Str.isDigit("."),{ fileName : "src/StrTests.hx", lineNumber : 89, className : "StrTests", methodName : "run"});
		t.yes(!dm_Str.isDigit("v-"),{ fileName : "src/StrTests.hx", lineNumber : 90, className : "StrTests", methodName : "run"});
		t.yes(!dm_Str.isDigit("_-"),{ fileName : "src/StrTests.hx", lineNumber : 91, className : "StrTests", methodName : "run"});
		t.yes(dm_Str.isDigit("2-"),{ fileName : "src/StrTests.hx", lineNumber : 92, className : "StrTests", methodName : "run"});
		t.yes(!dm_Str.isDigit(".-"),{ fileName : "src/StrTests.hx", lineNumber : 93, className : "StrTests", methodName : "run"});
		t.yes(!dm_Str.isLetterOrDigit(""),{ fileName : "src/StrTests.hx", lineNumber : 95, className : "StrTests", methodName : "run"});
		t.yes(!dm_Str.isLetterOrDigit(" "),{ fileName : "src/StrTests.hx", lineNumber : 96, className : "StrTests", methodName : "run"});
		t.yes(dm_Str.isLetterOrDigit("v"),{ fileName : "src/StrTests.hx", lineNumber : 97, className : "StrTests", methodName : "run"});
		t.yes(dm_Str.isLetterOrDigit("_"),{ fileName : "src/StrTests.hx", lineNumber : 98, className : "StrTests", methodName : "run"});
		t.yes(dm_Str.isLetterOrDigit("2"),{ fileName : "src/StrTests.hx", lineNumber : 99, className : "StrTests", methodName : "run"});
		t.yes(!dm_Str.isLetterOrDigit("."),{ fileName : "src/StrTests.hx", lineNumber : 100, className : "StrTests", methodName : "run"});
		t.yes(dm_Str.isLetterOrDigit("v-"),{ fileName : "src/StrTests.hx", lineNumber : 101, className : "StrTests", methodName : "run"});
		t.yes(dm_Str.isLetterOrDigit("_-"),{ fileName : "src/StrTests.hx", lineNumber : 102, className : "StrTests", methodName : "run"});
		t.yes(dm_Str.isLetterOrDigit("2-"),{ fileName : "src/StrTests.hx", lineNumber : 103, className : "StrTests", methodName : "run"});
		t.yes(!dm_Str.isLetterOrDigit(".-"),{ fileName : "src/StrTests.hx", lineNumber : 104, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("",-100),"",null,{ fileName : "src/StrTests.hx", lineNumber : 106, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("",-2),"",null,{ fileName : "src/StrTests.hx", lineNumber : 107, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("",0),"",null,{ fileName : "src/StrTests.hx", lineNumber : 108, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("",2),"",null,{ fileName : "src/StrTests.hx", lineNumber : 109, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("",100),"",null,{ fileName : "src/StrTests.hx", lineNumber : 110, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("a",-100),"a",null,{ fileName : "src/StrTests.hx", lineNumber : 111, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("a",-2),"a",null,{ fileName : "src/StrTests.hx", lineNumber : 112, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("a",0),"a",null,{ fileName : "src/StrTests.hx", lineNumber : 113, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("a",2),"",null,{ fileName : "src/StrTests.hx", lineNumber : 114, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("a",100),"",null,{ fileName : "src/StrTests.hx", lineNumber : 115, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("12345",-100),"12345",null,{ fileName : "src/StrTests.hx", lineNumber : 116, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("12345",-2),"45",null,{ fileName : "src/StrTests.hx", lineNumber : 117, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("12345",0),"12345",null,{ fileName : "src/StrTests.hx", lineNumber : 118, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("12345",2),"345",null,{ fileName : "src/StrTests.hx", lineNumber : 119, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("12345",100),"",null,{ fileName : "src/StrTests.hx", lineNumber : 120, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("",-100,-100),"",null,{ fileName : "src/StrTests.hx", lineNumber : 122, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("",-2,-100),"",null,{ fileName : "src/StrTests.hx", lineNumber : 123, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("",0,-100),"",null,{ fileName : "src/StrTests.hx", lineNumber : 124, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("",2,-100),"",null,{ fileName : "src/StrTests.hx", lineNumber : 125, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("",100,-100),"",null,{ fileName : "src/StrTests.hx", lineNumber : 126, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("",-100,-2),"",null,{ fileName : "src/StrTests.hx", lineNumber : 128, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("",-2,-2),"",null,{ fileName : "src/StrTests.hx", lineNumber : 129, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("",0,-2),"",null,{ fileName : "src/StrTests.hx", lineNumber : 130, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("",2,-2),"",null,{ fileName : "src/StrTests.hx", lineNumber : 131, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("",100,-2),"",null,{ fileName : "src/StrTests.hx", lineNumber : 132, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("",-100,0),"",null,{ fileName : "src/StrTests.hx", lineNumber : 134, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("",-2,0),"",null,{ fileName : "src/StrTests.hx", lineNumber : 135, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("",0,0),"",null,{ fileName : "src/StrTests.hx", lineNumber : 136, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("",2,0),"",null,{ fileName : "src/StrTests.hx", lineNumber : 137, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("",100,0),"",null,{ fileName : "src/StrTests.hx", lineNumber : 138, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("",-100,2),"",null,{ fileName : "src/StrTests.hx", lineNumber : 140, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("",-2,2),"",null,{ fileName : "src/StrTests.hx", lineNumber : 141, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("",0,2),"",null,{ fileName : "src/StrTests.hx", lineNumber : 142, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("",2,2),"",null,{ fileName : "src/StrTests.hx", lineNumber : 143, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("",100,2),"",null,{ fileName : "src/StrTests.hx", lineNumber : 144, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("",-100,100),"",null,{ fileName : "src/StrTests.hx", lineNumber : 146, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("",-2,100),"",null,{ fileName : "src/StrTests.hx", lineNumber : 147, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("",0,100),"",null,{ fileName : "src/StrTests.hx", lineNumber : 148, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("",2,100),"",null,{ fileName : "src/StrTests.hx", lineNumber : 149, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("",100,100),"",null,{ fileName : "src/StrTests.hx", lineNumber : 150, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("a",-100,-100),"",null,{ fileName : "src/StrTests.hx", lineNumber : 152, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("a",-2,-100),"",null,{ fileName : "src/StrTests.hx", lineNumber : 153, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("a",0,-100),"",null,{ fileName : "src/StrTests.hx", lineNumber : 154, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("a",2,-100),"",null,{ fileName : "src/StrTests.hx", lineNumber : 155, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("a",100,-100),"",null,{ fileName : "src/StrTests.hx", lineNumber : 156, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("a",-100,-2),"",null,{ fileName : "src/StrTests.hx", lineNumber : 158, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("a",-2,-2),"",null,{ fileName : "src/StrTests.hx", lineNumber : 159, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("a",0,-2),"",null,{ fileName : "src/StrTests.hx", lineNumber : 160, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("a",2,-2),"",null,{ fileName : "src/StrTests.hx", lineNumber : 161, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("a",100,-2),"",null,{ fileName : "src/StrTests.hx", lineNumber : 162, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("a",-100,0),"",null,{ fileName : "src/StrTests.hx", lineNumber : 164, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("a",-2,0),"",null,{ fileName : "src/StrTests.hx", lineNumber : 165, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("a",0,0),"",null,{ fileName : "src/StrTests.hx", lineNumber : 166, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("a",2,0),"",null,{ fileName : "src/StrTests.hx", lineNumber : 167, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("a",100,0),"",null,{ fileName : "src/StrTests.hx", lineNumber : 168, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("a",-100,2),"a",null,{ fileName : "src/StrTests.hx", lineNumber : 170, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("a",-2,2),"a",null,{ fileName : "src/StrTests.hx", lineNumber : 171, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("a",0,2),"a",null,{ fileName : "src/StrTests.hx", lineNumber : 172, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("a",2,2),"",null,{ fileName : "src/StrTests.hx", lineNumber : 173, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("a",100,2),"",null,{ fileName : "src/StrTests.hx", lineNumber : 174, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("a",-100,100),"a",null,{ fileName : "src/StrTests.hx", lineNumber : 176, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("a",-2,100),"a",null,{ fileName : "src/StrTests.hx", lineNumber : 177, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("a",0,100),"a",null,{ fileName : "src/StrTests.hx", lineNumber : 178, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("a",2,100),"",null,{ fileName : "src/StrTests.hx", lineNumber : 179, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("a",100,100),"",null,{ fileName : "src/StrTests.hx", lineNumber : 180, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("12345",-100,-100),"",null,{ fileName : "src/StrTests.hx", lineNumber : 182, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("12345",-2,-100),"",null,{ fileName : "src/StrTests.hx", lineNumber : 183, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("12345",0,-100),"",null,{ fileName : "src/StrTests.hx", lineNumber : 184, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("12345",2,-100),"",null,{ fileName : "src/StrTests.hx", lineNumber : 185, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("12345",100,-100),"",null,{ fileName : "src/StrTests.hx", lineNumber : 186, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("12345",-100,-2),"123",null,{ fileName : "src/StrTests.hx", lineNumber : 188, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("12345",-2,-2),"",null,{ fileName : "src/StrTests.hx", lineNumber : 189, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("12345",0,-2),"123",null,{ fileName : "src/StrTests.hx", lineNumber : 190, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("12345",2,-2),"3",null,{ fileName : "src/StrTests.hx", lineNumber : 191, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("12345",100,-2),"",null,{ fileName : "src/StrTests.hx", lineNumber : 192, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("12345",-100,0),"",null,{ fileName : "src/StrTests.hx", lineNumber : 194, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("12345",-2,0),"",null,{ fileName : "src/StrTests.hx", lineNumber : 195, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("12345",0,0),"",null,{ fileName : "src/StrTests.hx", lineNumber : 196, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("12345",2,0),"",null,{ fileName : "src/StrTests.hx", lineNumber : 197, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("12345",100,0),"",null,{ fileName : "src/StrTests.hx", lineNumber : 198, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("12345",-100,2),"12",null,{ fileName : "src/StrTests.hx", lineNumber : 200, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("12345",-2,2),"",null,{ fileName : "src/StrTests.hx", lineNumber : 201, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("12345",0,2),"12",null,{ fileName : "src/StrTests.hx", lineNumber : 202, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("12345",2,2),"",null,{ fileName : "src/StrTests.hx", lineNumber : 203, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("12345",100,2),"",null,{ fileName : "src/StrTests.hx", lineNumber : 204, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("12345",-100,100),"12345",null,{ fileName : "src/StrTests.hx", lineNumber : 206, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("12345",-2,100),"45",null,{ fileName : "src/StrTests.hx", lineNumber : 207, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("12345",0,100),"12345",null,{ fileName : "src/StrTests.hx", lineNumber : 208, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("12345",2,100),"345",null,{ fileName : "src/StrTests.hx", lineNumber : 209, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.sub("12345",100,100),"",null,{ fileName : "src/StrTests.hx", lineNumber : 210, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.left("",2),"",null,{ fileName : "src/StrTests.hx", lineNumber : 212, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.left("12345",2),"12",null,{ fileName : "src/StrTests.hx", lineNumber : 213, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.left("12345",-2),"123",null,{ fileName : "src/StrTests.hx", lineNumber : 214, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.right("",2),"",null,{ fileName : "src/StrTests.hx", lineNumber : 216, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.right("12345",2),"345",null,{ fileName : "src/StrTests.hx", lineNumber : 217, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.right("12345",-2),"45",null,{ fileName : "src/StrTests.hx", lineNumber : 218, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.decodeURIComponent(dm_Str.encodeURIComponent("http://www.es.dr/\"abv\"_()<")),"http://www.es.dr/\"abv\"_()<",null,{ fileName : "src/StrTests.hx", lineNumber : 220, className : "StrTests", methodName : "run"});
		t.eq(dm_Str.decodeURI(dm_Str.encodeURI("http://www.es.dr/\"abv\"_()<")),"http://www.es.dr/\"abv\"_()<",null,{ fileName : "src/StrTests.hx", lineNumber : 226, className : "StrTests", methodName : "run"});
		t.log();
	}
}
StrTests.__name__ = true;
class StringTools {
	static htmlEscape(s,quotes) {
		let buf_b = "";
		let _g_offset = 0;
		let _g_s = s;
		while(_g_offset < _g_s.length) {
			let s = _g_s;
			let index = _g_offset++;
			let c = s.charCodeAt(index);
			if(c >= 55296 && c <= 56319) {
				c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
			}
			let c1 = c;
			if(c1 >= 65536) {
				++_g_offset;
			}
			let code = c1;
			switch(code) {
			case 34:
				if(quotes) {
					buf_b += "&quot;";
				} else {
					buf_b += String.fromCodePoint(code);
				}
				break;
			case 38:
				buf_b += "&amp;";
				break;
			case 39:
				if(quotes) {
					buf_b += "&#039;";
				} else {
					buf_b += String.fromCodePoint(code);
				}
				break;
			case 60:
				buf_b += "&lt;";
				break;
			case 62:
				buf_b += "&gt;";
				break;
			default:
				buf_b += String.fromCodePoint(code);
			}
		}
		return buf_b;
	}
	static isSpace(s,pos) {
		let c = HxOverrides.cca(s,pos);
		if(!(c > 8 && c < 14)) {
			return c == 32;
		} else {
			return true;
		}
	}
	static ltrim(s) {
		let l = s.length;
		let r = 0;
		while(r < l && StringTools.isSpace(s,r)) ++r;
		if(r > 0) {
			return HxOverrides.substr(s,r,l - r);
		} else {
			return s;
		}
	}
	static rtrim(s) {
		let l = s.length;
		let r = 0;
		while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
		if(r > 0) {
			return HxOverrides.substr(s,0,l - r);
		} else {
			return s;
		}
	}
	static trim(s) {
		return StringTools.ltrim(StringTools.rtrim(s));
	}
	static lpad(s,c,l) {
		if(c.length <= 0) {
			return s;
		}
		let buf_b = "";
		l -= s.length;
		while(buf_b.length < l) buf_b += c == null ? "null" : "" + c;
		buf_b += s == null ? "null" : "" + s;
		return buf_b;
	}
	static rpad(s,c,l) {
		if(c.length <= 0) {
			return s;
		}
		let buf_b = "";
		buf_b += s == null ? "null" : "" + s;
		while(buf_b.length < l) buf_b += c == null ? "null" : "" + c;
		return buf_b;
	}
	static replace(s,sub,by) {
		return s.split(sub).join(by);
	}
}
StringTools.__name__ = true;
class Tests {
	static main() {
		B64Tests.run();
		CrypTests.run();
		DecTests.run();
		DtTests.run();
		ExcTests.run();
		ItTests.run();
		JsTests.run();
		OptTests.run();
		PathTests.run();
		RndTests.run();
		RsTests.run();
		StrTests.run();
	}
}
Tests.__name__ = true;
var ValueType = $hxEnums["ValueType"] = { __ename__:true,__constructs__:null
	,TNull: {_hx_name:"TNull",_hx_index:0,__enum__:"ValueType",toString:$estr}
	,TInt: {_hx_name:"TInt",_hx_index:1,__enum__:"ValueType",toString:$estr}
	,TFloat: {_hx_name:"TFloat",_hx_index:2,__enum__:"ValueType",toString:$estr}
	,TBool: {_hx_name:"TBool",_hx_index:3,__enum__:"ValueType",toString:$estr}
	,TObject: {_hx_name:"TObject",_hx_index:4,__enum__:"ValueType",toString:$estr}
	,TFunction: {_hx_name:"TFunction",_hx_index:5,__enum__:"ValueType",toString:$estr}
	,TClass: ($_=function(c) { return {_hx_index:6,c:c,__enum__:"ValueType",toString:$estr}; },$_._hx_name="TClass",$_.__params__ = ["c"],$_)
	,TEnum: ($_=function(e) { return {_hx_index:7,e:e,__enum__:"ValueType",toString:$estr}; },$_._hx_name="TEnum",$_.__params__ = ["e"],$_)
	,TUnknown: {_hx_name:"TUnknown",_hx_index:8,__enum__:"ValueType",toString:$estr}
};
ValueType.__constructs__ = [ValueType.TNull,ValueType.TInt,ValueType.TFloat,ValueType.TBool,ValueType.TObject,ValueType.TFunction,ValueType.TClass,ValueType.TEnum,ValueType.TUnknown];
class Type {
	static typeof(v) {
		switch(typeof(v)) {
		case "boolean":
			return ValueType.TBool;
		case "function":
			if(v.__name__ || v.__ename__) {
				return ValueType.TObject;
			}
			return ValueType.TFunction;
		case "number":
			if(Math.ceil(v) == v % 2147483648.0) {
				return ValueType.TInt;
			}
			return ValueType.TFloat;
		case "object":
			if(v == null) {
				return ValueType.TNull;
			}
			let e = v.__enum__;
			if(e != null) {
				return ValueType.TEnum($hxEnums[e]);
			}
			let c = js_Boot.getClass(v);
			if(c != null) {
				return ValueType.TClass(c);
			}
			return ValueType.TObject;
		case "string":
			return ValueType.TClass(String);
		case "undefined":
			return ValueType.TNull;
		default:
			return ValueType.TUnknown;
		}
	}
}
Type.__name__ = true;
class haxe_io_Bytes {
	constructor(data) {
		this.length = data.byteLength;
		this.b = new Uint8Array(data);
		this.b.bufferValue = data;
		data.hxBytes = this;
		data.bytes = this.b;
	}
	getString(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		let s = "";
		let b = this.b;
		let i = pos;
		let max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			let debug = pos > 0;
			while(i < max) {
				let c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					let code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					let c2 = b[i++];
					let code = (c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else {
					let c2 = b[i++];
					let c3 = b[i++];
					let u = (c & 15) << 18 | (c2 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				let c = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c);
			}
			break;
		}
		return s;
	}
	toString() {
		return this.getString(0,this.length);
	}
	static ofString(s,encoding) {
		if(encoding == haxe_io_Encoding.RawNative) {
			let buf = new Uint8Array(s.length << 1);
			let _g = 0;
			let _g1 = s.length;
			while(_g < _g1) {
				let i = _g++;
				let c = s.charCodeAt(i);
				buf[i << 1] = c & 255;
				buf[i << 1 | 1] = c >> 8;
			}
			return new haxe_io_Bytes(buf.buffer);
		}
		let a = [];
		let i = 0;
		while(i < s.length) {
			let c = s.charCodeAt(i++);
			if(55296 <= c && c <= 56319) {
				c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
			}
			if(c <= 127) {
				a.push(c);
			} else if(c <= 2047) {
				a.push(192 | c >> 6);
				a.push(128 | c & 63);
			} else if(c <= 65535) {
				a.push(224 | c >> 12);
				a.push(128 | c >> 6 & 63);
				a.push(128 | c & 63);
			} else {
				a.push(240 | c >> 18);
				a.push(128 | c >> 12 & 63);
				a.push(128 | c >> 6 & 63);
				a.push(128 | c & 63);
			}
		}
		return new haxe_io_Bytes(new Uint8Array(a).buffer);
	}
	static ofData(b) {
		let hb = b.hxBytes;
		if(hb != null) {
			return hb;
		}
		return new haxe_io_Bytes(b);
	}
}
haxe_io_Bytes.__name__ = true;
Object.assign(haxe_io_Bytes.prototype, {
	__class__: haxe_io_Bytes
});
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__:true,__constructs__:null
	,UTF8: {_hx_name:"UTF8",_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_name:"RawNative",_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
haxe_io_Encoding.__constructs__ = [haxe_io_Encoding.UTF8,haxe_io_Encoding.RawNative];
class haxe_crypto_Base64 {
	static encode(bytes,complement) {
		if(complement == null) {
			complement = true;
		}
		let str = new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).encodeBytes(bytes).toString();
		if(complement) {
			switch(bytes.length % 3) {
			case 1:
				str += "==";
				break;
			case 2:
				str += "=";
				break;
			default:
			}
		}
		return str;
	}
	static decode(str,complement) {
		if(complement == null) {
			complement = true;
		}
		if(complement) {
			while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
		}
		return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
	}
}
haxe_crypto_Base64.__name__ = true;
class dm_B64 {
	static encodeBytes(bs) {
		return haxe_crypto_Base64.encode(bs);
	}
	static encode(s) {
		return haxe_crypto_Base64.encode(haxe_io_Bytes.ofString(s));
	}
	static decodeBytes(s) {
		return haxe_crypto_Base64.decode(s);
	}
	static decode(s) {
		return haxe_crypto_Base64.decode(s).toString();
	}
}
dm_B64.__name__ = true;
class dm_Cryp {
	static genK(lg) {
		let bs = new haxe_io_Bytes(new ArrayBuffer(lg));
		let _g = 0;
		let _g1 = lg;
		while(_g < _g1) {
			let i = _g++;
			let v = Std.random(256);
			bs.b[i] = v;
		}
		return dm_B64.encodeBytes(bs).substring(0,lg);
	}
	static key(key,lg) {
		let k = dm_B64.decodeBytes(dm_B64.encode(key + "codified in irreversibleDeme is good, very good!\n\r8@@"));
		let lenk = k.length;
		let sum = 0;
		let _g = 0;
		let _g1 = lenk;
		while(_g < _g1) {
			let i = _g++;
			sum += k.b[i];
		}
		let lg2 = lg + lenk;
		let r = new haxe_io_Bytes(new ArrayBuffer(lg2));
		let r1 = new haxe_io_Bytes(new ArrayBuffer(lg2));
		let r2 = new haxe_io_Bytes(new ArrayBuffer(lg2));
		let ik = 0;
		let _g2 = 0;
		let _g3 = lg2;
		while(_g2 < _g3) {
			let i = _g2++;
			let v1 = k.b[ik];
			let v2 = v1 + k.b[v1 % lenk];
			let v3 = v2 + k.b[v2 % lenk];
			let v4 = v3 + k.b[v3 % lenk];
			sum = (sum + i + v4) % 256;
			r1.b[i] = sum;
			r2.b[i] = sum;
			++ik;
			if(ik == lenk) {
				ik = 0;
			}
		}
		let _g4 = 0;
		let _g5 = lg2;
		while(_g4 < _g5) {
			let i = _g4++;
			let v1 = r2.b[i];
			let v2 = v1 + r2.b[v1 % lg2];
			let v3 = v2 + r2.b[v2 % lg2];
			let v4 = v3 + r2.b[v3 % lg2];
			sum = (sum + v4) % 256;
			r2.b[i] = sum;
			r.b[i] = (sum + r1.b[i]) % 256;
		}
		return dm_B64.encodeBytes(r).substring(0,lg);
	}
	static cryp(key,msg) {
		let m = dm_B64.encode(msg);
		let lg = m.length;
		let k = dm_Cryp.key(key,lg);
		let r = new haxe_io_Bytes(new ArrayBuffer(lg));
		let _g = 0;
		let _g1 = lg;
		while(_g < _g1) {
			let i = _g++;
			r.b[i] = HxOverrides.cca(m,i) + HxOverrides.cca(k,i);
		}
		return dm_B64.encodeBytes(r);
	}
	static decryp(key,c) {
		let bs = dm_B64.decodeBytes(c);
		let lg = bs.length;
		let k = dm_Cryp.key(key,lg);
		let r_b = "";
		let _g = 0;
		let _g1 = lg;
		while(_g < _g1) {
			let i = _g++;
			let code = bs.b[i] - HxOverrides.cca(k,i);
			r_b += Std.string(String.fromCodePoint(code));
		}
		return dm_B64.decode(r_b);
	}
}
dm_Cryp.__name__ = true;
class dm_Dec {
	static pow(n) {
		switch(n) {
		case 0:
			return 1;
		case 1:
			return 10;
		case 2:
			return 100;
		case 3:
			return 1000;
		case 4:
			return 10000;
		case 5:
			return 100000;
		case 6:
			return 1000000;
		case 7:
			return 10000000;
		case 8:
			return 100000000;
		default:
			return 1000000000;
		}
	}
	static format(f,scale,thousand,dec) {
		let parts = dm_Dec.to(f,scale).split(".");
		let left = parts[0];
		let end = f < 0 ? left.length - 1 : left.length;
		let cut = 3;
		while(end > cut) {
			let ix = left.length - cut;
			left = left.substring(0,ix) + thousand + left.substring(ix);
			cut += 4;
			++end;
		}
		if(parts.length == 1) {
			return left;
		} else {
			return left + dec + parts[1];
		}
	}
	static eq(f1,f2,dif) {
		if(f1 < f2 + dif) {
			return f1 > f2 - dif;
		} else {
			return false;
		}
	}
	static round(f,scale) {
		if(scale < 0) {
			scale = 0;
		} else if(scale > 9) {
			scale = 9;
		}
		let mul = dm_Dec.pow(scale);
		if(f >= 0) {
			return Math.round(f * mul + 0.000000001) / mul;
		}
		return -(Math.round(-f * mul + 0.000000001) / mul);
	}
	static to(f,scale) {
		let parts = Std.string(dm_Dec.round(f,scale)).split(".");
		if(parts.length == 1) {
			if(scale == 0) {
				return parts[0];
			} else {
				return StringTools.rpad(parts[0] + ".","0",parts[0].length + 1 + scale);
			}
		}
		return StringTools.rpad(parts[0] + "." + parts[1],"0",parts[0].length + 1 + scale);
	}
	static toInt(f) {
		return Math.round(f) | 0;
	}
	static toIso(f,scale) {
		return dm_Dec.format(f,scale,".",",");
	}
	static toEn(f,scale) {
		return dm_Dec.format(f,scale,",",".");
	}
	static from(f) {
		let r = parseFloat(f);
		if(isNaN(r)) {
			return dm_Option.None;
		} else {
			return dm_Option.Some(r);
		}
	}
	static fromIso(f) {
		let r = parseFloat(StringTools.replace(StringTools.replace(f,".",""),",","."));
		if(isNaN(r)) {
			return dm_Option.None;
		} else {
			return dm_Option.Some(r);
		}
	}
	static fromEn(f) {
		let r = parseFloat(StringTools.replace(f,",",""));
		if(isNaN(r)) {
			return dm_Option.None;
		} else {
			return dm_Option.Some(r);
		}
	}
	static digits(n) {
		return dm_It.fromString(n).every(function(d) {
			if(d >= "0") {
				return d <= "9";
			} else {
				return false;
			}
		});
	}
}
dm_Dec.__name__ = true;
class dm_Dt {
	static froms(s,isEn) {
		let d = s.substring(0,2);
		let m = s.substring(3,5);
		if(isEn) {
			let tmp = d;
			d = m;
			m = tmp;
		}
		return dm_Dt.from(s.substring(6) + m + d);
	}
	static mk(day,month,year) {
		return new Date(year,month - 1,day,0,0,0);
	}
	static day(d) {
		return d.getDate();
	}
	static weekDay(d) {
		return d.getDay();
	}
	static month(d) {
		return d.getMonth() + 1;
	}
	static year(d) {
		return d.getFullYear();
	}
	static dfMillis(d1,d2) {
		return d1.getTime() - d2.getTime();
	}
	static eqTime(d1,d2) {
		return dm_Dt.dfMillis(d1,d2) == 0;
	}
	static compareTime(d1,d2) {
		let df = dm_Dt.dfMillis(d1,d2);
		if(df > 0) {
			return 1;
		} else if(df < 0) {
			return -1;
		} else {
			return 0;
		}
	}
	static df(d1,d2) {
		return Math.round(dm_Dt.dfMillis(new Date(d1.getFullYear(),d1.getMonth(),d1.getDate(),0,0,0),new Date(d2.getFullYear(),d2.getMonth(),d2.getDate(),0,0,0)) / 86400000.0);
	}
	static eq(d1,d2) {
		return dm_Dt.df(d1,d2) == 0;
	}
	static addMillis(d,millis) {
		return new Date(d.getTime() + millis);
	}
	static add(d,days) {
		return new Date(d.getTime() + js_Boot.__cast(days , Float) * 86400000.0);
	}
	static to(d) {
		return DateTools.format(d,"%Y%m%d");
	}
	static toIso(d,sep) {
		if(sep == null) {
			sep = "/";
		}
		return DateTools.format(d,"%d" + sep + "%m" + sep + "%Y");
	}
	static toEn(d,sep) {
		if(sep == null) {
			sep = "/";
		}
		return DateTools.format(d,"%m" + sep + "%d" + sep + "%Y");
	}
	static from(s) {
		if(s.length != 8 || !dm_Dec.digits(s)) {
			return dm_Option.None;
		}
		let y = Std.parseInt(s.substring(0,4));
		if(y < 1000) {
			return dm_Option.None;
		}
		return dm_Option.Some(dm_Dt.mk(Std.parseInt(s.substring(6)),Std.parseInt(s.substring(4,6)),y));
	}
	static fromIso(s) {
		return dm_Dt.froms(s,false);
	}
	static fromEn(s) {
		return dm_Dt.froms(s,true);
	}
	static toTime(d) {
		return DateTools.format(d,"%H:%M:%S");
	}
	static fromTime(s) {
		let parts = s.split(":");
		if(s.length != 8 || parts.length != 3) {
			return dm_Option.None;
		}
		if(!dm_Dec.digits(parts[0] + parts[1] + parts[2])) {
			return dm_Option.None;
		}
		let today = new Date();
		return dm_Option.Some(new Date(today.getFullYear(),today.getMonth(),today.getDate(),Std.parseInt(parts[0]),Std.parseInt(parts[1]),Std.parseInt(parts[2])));
	}
	static isLeap(y) {
		if(!(y % 4 == 0 && y % 100 != 0)) {
			return y % 400 == 0;
		} else {
			return true;
		}
	}
}
dm_Dt.__name__ = true;
class dm_Exc {
	static show(msg,pos) {
		return "" + pos.fileName + "." + pos.methodName + ":" + pos.lineNumber + ": " + msg;
	}
	static illegalState(msg,pos) {
		return dm_Exc.show("Illegal state : " + msg,pos);
	}
	static range(begin,end,index,pos) {
		return dm_Exc.show("Index out of range : " + index + " out of [" + begin + " - " + end + "]",pos);
	}
	static illegalArgument(argumentName,expected,actual,pos) {
		return dm_Exc.show("Illegal argument : Variable \"" + argumentName + "\"\n" + ("Expected: " + Std.string(expected) + "\nActual: " + Std.string(actual)),pos);
	}
	static io(msg,pos) {
		return dm_Exc.show("IO error : " + msg,pos);
	}
	static type(msg) {
		if(msg.indexOf(": Exception :") != -1) {
			return dm_EType.EGeneric;
		} else if(msg.indexOf(": Illegal state :") != -1) {
			return dm_EType.EIllegalState;
		} else if(msg.indexOf(": Index out of range :") != -1) {
			return dm_EType.ERange;
		} else if(msg.indexOf(": Illegal argument :") != -1) {
			return dm_EType.EIllegalArgument;
		} else if(msg.indexOf(": IO error :") != -1) {
			return dm_EType.EIo;
		} else {
			return dm_EType.EUndefined;
		}
	}
}
dm_Exc.__name__ = true;
var dm_EType = $hxEnums["dm.EType"] = { __ename__:true,__constructs__:null
	,EUndefined: {_hx_name:"EUndefined",_hx_index:0,__enum__:"dm.EType",toString:$estr}
	,EGeneric: {_hx_name:"EGeneric",_hx_index:1,__enum__:"dm.EType",toString:$estr}
	,EIllegalState: {_hx_name:"EIllegalState",_hx_index:2,__enum__:"dm.EType",toString:$estr}
	,ERange: {_hx_name:"ERange",_hx_index:3,__enum__:"dm.EType",toString:$estr}
	,EIllegalArgument: {_hx_name:"EIllegalArgument",_hx_index:4,__enum__:"dm.EType",toString:$estr}
	,EIo: {_hx_name:"EIo",_hx_index:5,__enum__:"dm.EType",toString:$estr}
};
dm_EType.__constructs__ = [dm_EType.EUndefined,dm_EType.EGeneric,dm_EType.EIllegalState,dm_EType.ERange,dm_EType.EIllegalArgument,dm_EType.EIo];
class dm_It {
	constructor(hasNext,next) {
		this.hasNext = hasNext;
		this.next = next;
	}
	contains(e,feq) {
		if(feq == null) {
			while(this.hasNext()) if(this.next() == e) {
				return true;
			}
		} else {
			while(this.hasNext()) if(feq(this.next(),e)) {
				return true;
			}
		}
		return false;
	}
	count() {
		let r = 0;
		while(this.hasNext()) {
			++r;
			this.next();
		}
		return r;
	}
	each(fn) {
		while(this.hasNext()) fn(this.next());
	}
	eachSyn(fn,go,fail) {
		let frec = null;
		let _gthis = this;
		frec = function() {
			if(_gthis.hasNext()) {
				if(fail == null) {
					fn(_gthis.next(),frec);
				} else {
					try {
						fn(_gthis.next(),frec);
					} catch( _g ) {
						let e = haxe_Exception.caught(_g).unwrap();
						fail(e);
					}
				}
			} else {
				go();
			}
		};
		frec();
	}
	eq(it,feq) {
		if(feq == null) {
			while(this.hasNext()) if(it.hasNext() && this.next() == it.next()) {
				continue;
			} else {
				return false;
			}
		} else {
			while(this.hasNext()) if(it.hasNext() && feq(this.next(),it.next())) {
				continue;
			} else {
				return false;
			}
		}
		return !it.hasNext();
	}
	every(fn) {
		while(this.hasNext()) if(!fn(this.next())) {
			return false;
		}
		return true;
	}
	find(fn) {
		while(this.hasNext()) {
			let e = this.next();
			if(fn(e)) {
				return dm_Option.Some(e);
			}
		}
		return dm_Option.None;
	}
	findLast(fn) {
		let r = dm_Option.None;
		while(this.hasNext()) {
			let e = this.next();
			if(fn(e)) {
				r = dm_Option.Some(e);
			}
		}
		return r;
	}
	index(e,feq) {
		let c = 0;
		if(feq == null) {
			while(this.hasNext()) if(this.next() == e) {
				return c;
			} else {
				++c;
			}
		} else {
			while(this.hasNext()) if(feq(this.next(),e)) {
				return c;
			} else {
				++c;
			}
		}
		return -1;
	}
	indexf(fn) {
		let c = 0;
		while(this.hasNext()) {
			if(fn(this.next())) {
				return c;
			}
			++c;
		}
		return -1;
	}
	lastIndex(e,feq) {
		let r = -1;
		let c = 0;
		if(feq == null) {
			while(this.hasNext()) if(this.next() == e) {
				++c;
				r = c - 1;
			} else {
				++c;
			}
		} else {
			while(this.hasNext()) if(feq(this.next(),e)) {
				++c;
				r = c - 1;
			} else {
				++c;
			}
		}
		return r;
	}
	lastIndexf(fn) {
		let r = -1;
		let c = 0;
		while(this.hasNext()) {
			if(fn(this.next())) {
				r = c;
			}
			++c;
		}
		return r;
	}
	reduce(seed,fn) {
		while(this.hasNext()) seed = fn(seed,this.next());
		return seed;
	}
	some(fn) {
		while(this.hasNext()) if(fn(this.next())) {
			return true;
		}
		return false;
	}
	to() {
		let r = [];
		while(this.hasNext()) r.push(this.next());
		return r;
	}
	toString() {
		let r_b = "";
		r_b += "It[";
		if(this.hasNext()) {
			r_b += Std.string(Std.string(this.next()));
			while(this.hasNext()) {
				r_b += ",";
				r_b += Std.string(Std.string(this.next()));
			}
		}
		r_b += "]";
		return r_b;
	}
	toMap() {
		try {
			let it = this;
			let r = new haxe_ds_StringMap();
			while(it.hasNext()) {
				let nx = it.next();
				r.h[nx.e1] = nx.e2;
			}
			return dm_Option.Some(r);
		} catch( _g ) {
			return dm_Option.None;
		}
	}
	cat(it) {
		let _gthis = this;
		return new dm_It(function() {
			if(!_gthis.hasNext()) {
				return it.hasNext();
			} else {
				return true;
			}
		},function() {
			if(_gthis.hasNext()) {
				return _gthis.next();
			} else {
				return it.next();
			}
		});
	}
	drop(n) {
		let c = 0;
		while(c < n && this.hasNext()) {
			++c;
			this.next();
		}
		return this;
	}
	dropWhile(fn) {
		let e;
		let nxt = this.hasNext();
		while(nxt) {
			e = this.next();
			if(!fn(e)) {
				break;
			}
			nxt = this.hasNext();
		}
		let _gthis = this;
		return new dm_It(function() {
			return nxt;
		},function() {
			let r = e;
			nxt = _gthis.hasNext();
			if(nxt) {
				e = _gthis.next();
			}
			return r;
		});
	}
	dropUntil(fn) {
		let e;
		let nxt = this.hasNext();
		while(nxt) {
			e = this.next();
			if(fn(e)) {
				break;
			}
			nxt = this.hasNext();
		}
		let _gthis = this;
		return new dm_It(function() {
			return nxt;
		},function() {
			let r = e;
			nxt = _gthis.hasNext();
			if(nxt) {
				e = _gthis.next();
			}
			return r;
		});
	}
	filter(fn) {
		let e;
		let _gthis = this;
		let goNext = function() {
			while(_gthis.hasNext()) {
				e = _gthis.next();
				if(fn(e)) {
					return true;
				}
			}
			return false;
		};
		let nxt = goNext();
		return new dm_It(function() {
			return nxt;
		},function() {
			let r = e;
			nxt = goNext();
			return r;
		});
	}
	map(fn,fn2) {
		let _gthis = this;
		if(fn2 == null) {
			return new dm_It(function() {
				return _gthis.hasNext();
			},function() {
				return fn(_gthis.next());
			});
		} else {
			let isFirst = true;
			return new dm_It(function() {
				return _gthis.hasNext();
			},function() {
				if(isFirst) {
					isFirst = false;
					return fn(_gthis.next());
				} else {
					return fn2(_gthis.next());
				}
			});
		}
	}
	push(e) {
		return this.cat(dm_It.unary(e));
	}
	take(n) {
		let c = 0;
		let _gthis = this;
		return new dm_It(function() {
			if(c < n) {
				return _gthis.hasNext();
			} else {
				return false;
			}
		},function() {
			c += 1;
			return _gthis.next();
		});
	}
	takeWhile(fn) {
		let e;
		let nxt = this.hasNext();
		let _gthis = this;
		if(nxt) {
			e = this.next();
			return new dm_It(function() {
				if(nxt) {
					return fn(e);
				} else {
					return false;
				}
			},function() {
				let r = e;
				nxt = _gthis.hasNext();
				if(nxt) {
					e = _gthis.next();
				}
				return r;
			});
		}
		return dm_It.empty();
	}
	takeUntil(fn) {
		let e;
		let nxt = this.hasNext();
		let _gthis = this;
		if(nxt) {
			e = this.next();
			return new dm_It(function() {
				if(nxt) {
					return !fn(e);
				} else {
					return false;
				}
			},function() {
				let r = e;
				nxt = _gthis.hasNext();
				if(nxt) {
					e = _gthis.next();
				}
				return r;
			});
		}
		return dm_It.empty();
	}
	unshift(e) {
		return dm_It.unary(e).cat(this);
	}
	reverse() {
		let tmp = this.to();
		tmp.reverse();
		return dm_It.from(tmp);
	}
	sort(fn) {
		let tmp = this.to();
		tmp.sort(fn);
		return dm_It.from(tmp);
	}
	shuffle() {
		let a = this.to();
		dm_Rnd.shuffle(a);
		return dm_It.from(a);
	}
	static from(i) {
		let it = $getIterator(i);
		return new dm_It($bind(it,it.hasNext),$bind(it,it.next));
	}
	static fromString(s) {
		let len = s.length;
		let ix = 0;
		return new dm_It(function() {
			return ix < len;
		},function() {
			ix += 1;
			return s.charAt(ix - 1);
		});
	}
	static fromMap(m) {
		let kvs_length;
		let kvs_keys;
		let kvs_h;
		let kvs_current;
		let h = m.h;
		kvs_h = h;
		kvs_keys = Object.keys(h);
		kvs_length = kvs_keys.length;
		kvs_current = 0;
		return new dm_It(function() {
			return kvs_current < kvs_length;
		},function() {
			kvs_current += 1;
			let key = kvs_keys[kvs_current - 1];
			let kv_key = key;
			let kv_value = kvs_h[key];
			return new dm_Tp(kv_key,kv_value);
		});
	}
	static empty() {
		return new dm_It(function() {
			return false;
		},function() {
			return null;
		});
	}
	static unary(e) {
		return dm_It.from([e]);
	}
	static range(begin,end) {
		if(end == null) {
			end = begin;
			begin = 0;
		}
		let c = begin;
		return new dm_It(function() {
			return c < end;
		},function() {
			c += 1;
			return c - 1;
		});
	}
	static box(arr) {
		let len = arr.length;
		if(len == 0) {
			return dm_It.empty();
		}
		let a = arr.slice();
		dm_Rnd.shuffle(a);
		let c = 0;
		return new dm_It(function() {
			return true;
		},function() {
			if(c < len) {
				c += 1;
				return a[c - 1];
			} else {
				dm_Rnd.shuffle(a);
				c = 0;
				c += 1;
				return a[c - 1];
			}
		});
	}
	static mbox(m) {
		let a = [];
		let k = m.keys();
		while(k.hasNext()) {
			let k1 = k.next();
			let _g = 0;
			let _g1 = m.get(k1);
			while(_g < _g1) {
				let i = _g++;
				a.push(k1);
			}
		}
		return dm_It.box(a);
	}
	static zip(it1,it2) {
		return new dm_It(function() {
			if(it1.hasNext()) {
				return it2.hasNext();
			} else {
				return false;
			}
		},function() {
			return new dm_Tp(it1.next(),it2.next());
		});
	}
	static zip3(it1,it2,it3) {
		return new dm_It(function() {
			if(it1.hasNext() && it2.hasNext()) {
				return it3.hasNext();
			} else {
				return false;
			}
		},function() {
			return new dm_Tp3(it1.next(),it2.next(),it3.next());
		});
	}
	static join(it,sep) {
		return it.map(function(e) {
			return e;
		},function(e) {
			return sep + e;
		}).reduce("",function(seed,e) {
			return seed + e;
		});
	}
	static split(s,sep) {
		let len = s.length;
		let slen = sep.length;
		if(slen == 0) {
			return dm_It.fromString(s);
		}
		let pos = 0;
		return new dm_It(function() {
			return pos <= len;
		},function() {
			let ix = s.indexOf(sep,pos);
			if(ix == -1) {
				ix = len;
			}
			let r = s.substring(pos,ix);
			pos = ix + slen;
			return r;
		});
	}
}
dm_It.__name__ = true;
Object.assign(dm_It.prototype, {
	__class__: dm_It
});
class dm_Js {
	constructor(js) {
		this.js = js;
	}
	getType() {
		return Std.string(Type.typeof(this.js));
	}
	to() {
		return JSON.stringify(this.js);
	}
	isNull() {
		return this.js == null;
	}
	rb() {
		try {
			return js_Boot.__cast(this.js , Bool);
		} catch( _g ) {
			if(typeof(haxe_Exception.caught(_g).unwrap()) == "string") {
				throw haxe_Exception.thrown(dm_Exc.illegalArgument("js","Bool",this.getType(),{ fileName : "dm/Js.hx", lineNumber : 116, className : "dm.Js", methodName : "rb"}));
			} else {
				throw _g;
			}
		}
	}
	ri() {
		try {
			return js_Boot.__cast(this.js , Int);
		} catch( _g ) {
			if(typeof(haxe_Exception.caught(_g).unwrap()) == "string") {
				throw haxe_Exception.thrown(dm_Exc.illegalArgument("js","Int",this.getType(),{ fileName : "dm/Js.hx", lineNumber : 124, className : "dm.Js", methodName : "ri"}));
			} else {
				throw _g;
			}
		}
	}
	rf() {
		try {
			return js_Boot.__cast(this.js , Float);
		} catch( _g ) {
			if(typeof(haxe_Exception.caught(_g).unwrap()) == "string") {
				throw haxe_Exception.thrown(dm_Exc.illegalArgument("js","Float",this.getType(),{ fileName : "dm/Js.hx", lineNumber : 132, className : "dm.Js", methodName : "rf"}));
			} else {
				throw _g;
			}
		}
	}
	rs() {
		try {
			return js_Boot.__cast(this.js , String);
		} catch( _g ) {
			if(typeof(haxe_Exception.caught(_g).unwrap()) == "string") {
				throw haxe_Exception.thrown(dm_Exc.illegalArgument("js","String",this.getType(),{ fileName : "dm/Js.hx", lineNumber : 140, className : "dm.Js", methodName : "rs"}));
			} else {
				throw _g;
			}
		}
	}
	ra() {
		try {
			let a = [];
			let _g = 0;
			let _g1 = js_Boot.__cast(this.js , Array);
			while(_g < _g1.length) {
				let e = _g1[_g];
				++_g;
				a.push(new dm_Js(e));
			}
			return a;
		} catch( _g ) {
			if(typeof(haxe_Exception.caught(_g).unwrap()) == "string") {
				throw haxe_Exception.thrown(dm_Exc.illegalArgument("js","Array<Js>",this.getType(),{ fileName : "dm/Js.hx", lineNumber : 150, className : "dm.Js", methodName : "ra"}));
			} else {
				throw _g;
			}
		}
	}
	ro() {
		try {
			let fn1 = function(o) {
				return Object.keys(o);
			};
			let fn2 = function(o,k) {
				return o[k];
			};
			let obj = this.js;
			let r = new haxe_ds_StringMap();
			let _g = 0;
			let _g1 = fn1(obj);
			while(_g < _g1.length) {
				let k = _g1[_g];
				++_g;
				let value = new dm_Js(fn2(obj,k));
				r.h[k] = value;
			}
			return r;
		} catch( _g ) {
			if(typeof(haxe_Exception.caught(_g).unwrap()) == "string") {
				throw haxe_Exception.thrown(dm_Exc.illegalArgument("js","Map<String, Js>",this.getType(),{ fileName : "dm/Js.hx", lineNumber : 178, className : "dm.Js", methodName : "ro"}));
			} else {
				throw _g;
			}
		}
	}
	rArray(ffrom) {
		let _this = this.ra();
		let result = new Array(_this.length);
		let _g = 0;
		let _g1 = _this.length;
		while(_g < _g1) {
			let i = _g++;
			result[i] = ffrom(_this[i]);
		}
		return result;
	}
	rMap(ffrom) {
		let r = new haxe_ds_StringMap();
		let h = this.ro().h;
		let _g_h = h;
		let _g_keys = Object.keys(h);
		let _g_length = _g_keys.length;
		let _g_current = 0;
		while(_g_current < _g_length) {
			let key = _g_keys[_g_current++];
			let _g1_key = key;
			let _g1_value = _g_h[key];
			let k = _g1_key;
			let v = _g1_value;
			let value = ffrom(v);
			r.h[k] = value;
		}
		return r;
	}
	static from(s) {
		try {
			return new dm_Js(JSON.parse(s));
		} catch( _g ) {
			throw haxe_Exception.thrown(dm_Exc.illegalArgument("s = " + s,"Json string","Invalid Json",{ fileName : "dm/Js.hx", lineNumber : 32, className : "dm.Js", methodName : "from"}));
		}
	}
	static wn() {
		return new dm_Js(null);
	}
	static wb(b) {
		return new dm_Js(b);
	}
	static wi(i) {
		return new dm_Js(i);
	}
	static wf(f) {
		return new dm_Js(f);
	}
	static ws(s) {
		return new dm_Js(s);
	}
	static wa(a) {
		let jsa = [];
		let _g = 0;
		while(_g < a.length) {
			let e = a[_g];
			++_g;
			jsa.push(e.js);
		}
		return new dm_Js(jsa);
	}
	static wo(o) {
		let fn1 = function() {
			return {}
		};
		let fn2 = function(o,k,v) {
			o[k]=v;
		};
		let r = fn1();
		let h = o.h;
		let k_h = h;
		let k_keys = Object.keys(h);
		let k_length = k_keys.length;
		let k_current = 0;
		while(k_current < k_length) {
			let k = k_keys[k_current++];
			let v = o.h[k];
			fn2(r,k,v.js);
		}
		return new dm_Js(r);
	}
	static wArray(it,fto) {
		let _g = [];
		let x = $getIterator(it);
		while(x.hasNext()) {
			let x1 = x.next();
			_g.push(fto(x1));
		}
		return dm_Js.wa(_g);
	}
	static wMap(m,fto) {
		let r = new haxe_ds_StringMap();
		let h = m.h;
		let _g_h = h;
		let _g_keys = Object.keys(h);
		let _g_length = _g_keys.length;
		let _g_current = 0;
		while(_g_current < _g_length) {
			let key = _g_keys[_g_current++];
			let _g1_key = key;
			let _g1_value = _g_h[key];
			let k = _g1_key;
			let v = _g1_value;
			let value = fto(v);
			r.h[k] = value;
		}
		return dm_Js.wo(r);
	}
}
dm_Js.__name__ = true;
Object.assign(dm_Js.prototype, {
	__class__: dm_Js
});
var dm_Option = $hxEnums["dm.Option"] = { __ename__:true,__constructs__:null
	,Some: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"dm.Option",toString:$estr}; },$_._hx_name="Some",$_.__params__ = ["v"],$_)
	,None: {_hx_name:"None",_hx_index:1,__enum__:"dm.Option",toString:$estr}
};
dm_Option.__constructs__ = [dm_Option.Some,dm_Option.None];
class dm_Opt {
	static get(o) {
		if(o._hx_index == 0) {
			let value = o.v;
			return value;
		} else {
			return null;
		}
	}
	static oget(o,v) {
		if(o._hx_index == 0) {
			let value = o.v;
			return value;
		} else {
			return v;
		}
	}
	static eget(o) {
		if(o._hx_index == 0) {
			let value = o.v;
			return value;
		} else {
			throw haxe_Exception.thrown("Option is None");
		}
	}
	static fmap(e,fn) {
		if(e._hx_index == 0) {
			let value = e.v;
			return dm_Option.Some(fn(value));
		} else {
			return dm_Option.None;
		}
	}
	static bind(e,fn) {
		if(e._hx_index == 0) {
			let value = e.v;
			return fn(value);
		} else {
			return dm_Option.None;
		}
	}
}
dm_Opt.__name__ = true;
class dm_Path {
	static name(path) {
		let ix = path.lastIndexOf("/");
		if(ix != -1) {
			return path.substring(ix + 1);
		}
		return path;
	}
	static parent(path) {
		let ix = path.lastIndexOf("/");
		if(ix == -1) {
			ix = 0;
		}
		return path.substring(0,ix);
	}
	static extension(path) {
		let n = dm_Path.name(path);
		let ix = n.lastIndexOf(".");
		if(ix == -1) {
			ix = n.length;
		}
		return n.substring(ix);
	}
	static onlyName(path) {
		let n = dm_Path.name(path);
		let ix = n.lastIndexOf(".");
		if(ix != -1) {
			return n.substring(0,ix);
		}
		return n;
	}
	static cat(ps) {
		return dm_It.join(dm_It.from(ps).map(function(e) {
			return e;
		},function(e) {
			return "/" + e;
		}),"");
	}
	static normalize(path) {
		return haxe_io_Path.normalize(path);
	}
}
dm_Path.__name__ = true;
class dm_Rnd {
	static i(n) {
		if(n < 0) {
			n = 0;
		}
		return Math.floor(Math.random() * n);
	}
	static f(n1,n2,d) {
		return dm_Dec.round(n1 + Math.random() * (n2 - n1),d);
	}
	static shuffle(a) {
		let j;
		let tmp;
		let i = a.length;
		while(i > 1) {
			j = Math.floor(Math.random() * i--);
			tmp = a[i];
			a[i] = a[j];
			a[j] = tmp;
		}
	}
	static mkBox(es) {
		let r = [];
		dm_It.from(es).each(function(e) {
			dm_It.range(0,e.e2).each(function(n) {
				r.push(e.e1);
			});
		});
		return new dm_Box(r);
	}
}
dm_Rnd.__name__ = true;
class dm_Box {
	constructor(es) {
		this.es = es;
		this.box = dm_It.from(es).shuffle().to();
	}
	next() {
		if(this.box.length == 0) {
			this.box = dm_It.from(this.es).shuffle().to();
		}
		return this.box.pop();
	}
}
dm_Box.__name__ = true;
Object.assign(dm_Box.prototype, {
	__class__: dm_Box
});
var dm_Result = $hxEnums["dm.Result"] = { __ename__:true,__constructs__:null
	,Ok: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"dm.Result",toString:$estr}; },$_._hx_name="Ok",$_.__params__ = ["v"],$_)
	,Error: ($_=function(s) { return {_hx_index:1,s:s,__enum__:"dm.Result",toString:$estr}; },$_._hx_name="Error",$_.__params__ = ["s"],$_)
};
dm_Result.__constructs__ = [dm_Result.Ok,dm_Result.Error];
class dm_Rs {
	static fmap(e,fn) {
		switch(e._hx_index) {
		case 0:
			let value = e.v;
			return dm_Result.Ok(fn(value));
		case 1:
			let s = e.s;
			return dm_Result.Error(s);
		}
	}
	static bind(e,fn) {
		switch(e._hx_index) {
		case 0:
			let value = e.v;
			return fn(value);
		case 1:
			let s = e.s;
			return dm_Result.Error(s);
		}
	}
}
dm_Rs.__name__ = true;
class dm_Str {
	static cutLeft(text,width) {
		if(text.length > width) {
			return "..." + text.substring(text.length - width + 3);
		}
		return text;
	}
	static cutRight(text,width) {
		if(text.length > width) {
			return text.substring(0,width - 3) + "...";
		}
		return text;
	}
	static isSpace(text) {
		if(text.length == 0) {
			return false;
		} else {
			return StringTools.isSpace(text,0);
		}
	}
	static isLetter(text) {
		if(text.length == 0) {
			return false;
		}
		let ch = text.charAt(0);
		if(!(ch >= "a" && ch <= "z")) {
			if(!(ch >= "A" && ch <= "Z")) {
				return ch == "_";
			} else {
				return true;
			}
		} else {
			return true;
		}
	}
	static isDigit(text) {
		if(text.length == 0) {
			return false;
		}
		let ch = text.charAt(0);
		if(ch >= "0") {
			return ch <= "9";
		} else {
			return false;
		}
	}
	static isLetterOrDigit(text) {
		if(!dm_Str.isLetter(text)) {
			return dm_Str.isDigit(text);
		} else {
			return true;
		}
	}
	static compare(s1,s2) {
		if(s1 < s2) {
			return -1;
		} else if(s1 > s2) {
			return 1;
		} else {
			return 0;
		}
	}
	static localeCompare(s1,s2) {
		return s1.localeCompare(s2);
	}
	static sub(s,begin,end) {
		if(end == null) {
			end = s.length;
		}
		let lg = s.length;
		if(begin < 0) {
			begin += lg;
		}
		if(end < 0) {
			end += lg;
		}
		if(begin < 0) {
			begin = 0;
		}
		if(end > lg) {
			end = lg;
		}
		if(end <= begin) {
			return "";
		}
		return s.substring(begin,end);
	}
	static left(s,ix) {
		return dm_Str.sub(s,0,ix);
	}
	static right(s,ix) {
		return dm_Str.sub(s,ix);
	}
	static encodeURIComponent(s) {
		return encodeURIComponent(s);
	}
	static decodeURIComponent(url) {
		return decodeURIComponent(url);
	}
	static encodeURI(s) {
		return encodeURI(s);
	}
	static decodeURI(url) {
		return decodeURI(url);
	}
}
dm_Str.__name__ = true;
class dm_Test {
	constructor(name) {
		this.subName = "";
		this.pass = 0;
		this.name = name;
	}
	msg(actual,expected,pos) {
		let m = "" + pos.fileName + "." + pos.methodName + ":" + pos.lineNumber + ": " + "Test fail in [" + this.name + (this.subName == "" ? "" : "; ") + this.subName + "]\n" + "  Actual  : " + Std.string(actual) + "\n  Expected: " + Std.string(expected);
		throw new haxe_Exception(m);
	}
	log() {
		let m = "Test [" + this.name + "] summary:\n" + "  Passed: " + this.pass;
		haxe_Log.trace(m,null);
	}
	yes(value,pos) {
		if(value) {
			++this.pass;
		} else {
			this.msg(false,true,pos);
		}
	}
	not(value,pos) {
		if(value) {
			this.msg(true,false,pos);
		} else {
			++this.pass;
		}
	}
	eq(actual,expected,feq,pos) {
		let isEq = feq == null ? actual == expected : feq(actual,expected);
		if(isEq) {
			++this.pass;
		} else {
			this.msg(actual,expected,pos);
		}
	}
}
dm_Test.__name__ = true;
Object.assign(dm_Test.prototype, {
	__class__: dm_Test
});
class dm_Tp {
	constructor(e1,e2) {
		this.e1 = e1;
		this.e2 = e2;
	}
	static equals(tp1,tp2) {
		if(tp1.e1 == tp2.e1) {
			return tp1.e2 == tp2.e2;
		} else {
			return false;
		}
	}
}
dm_Tp.__name__ = true;
Object.assign(dm_Tp.prototype, {
	__class__: dm_Tp
});
class dm_Tp3 {
	constructor(e1,e2,e3) {
		this.e1 = e1;
		this.e2 = e2;
		this.e3 = e3;
	}
	static equals(tp1,tp2) {
		if(tp1.e1 == tp2.e1 && tp1.e2 == tp2.e2) {
			return tp1.e3 == tp2.e3;
		} else {
			return false;
		}
	}
}
dm_Tp3.__name__ = true;
Object.assign(dm_Tp3.prototype, {
	__class__: dm_Tp3
});
class haxe_IMap {
}
haxe_IMap.__name__ = true;
haxe_IMap.__isInterface__ = true;
Object.assign(haxe_IMap.prototype, {
	__class__: haxe_IMap
});
class haxe_Exception extends Error {
	constructor(message,previous,native) {
		super(message);
		this.message = message;
		this.__previousException = previous;
		this.__nativeException = native != null ? native : this;
	}
	unwrap() {
		return this.__nativeException;
	}
	toString() {
		return this.get_message();
	}
	get_message() {
		return this.message;
	}
	get_native() {
		return this.__nativeException;
	}
	static caught(value) {
		if(((value) instanceof haxe_Exception)) {
			return value;
		} else if(((value) instanceof Error)) {
			return new haxe_Exception(value.message,null,value);
		} else {
			return new haxe_ValueException(value,null,value);
		}
	}
	static thrown(value) {
		if(((value) instanceof haxe_Exception)) {
			return value.get_native();
		} else if(((value) instanceof Error)) {
			return value;
		} else {
			let e = new haxe_ValueException(value);
			return e;
		}
	}
}
haxe_Exception.__name__ = true;
haxe_Exception.__super__ = Error;
Object.assign(haxe_Exception.prototype, {
	__class__: haxe_Exception
});
class haxe_Log {
	static formatOutput(v,infos) {
		let str = Std.string(v);
		if(infos == null) {
			return str;
		}
		let pstr = infos.fileName + ":" + infos.lineNumber;
		if(infos.customParams != null) {
			let _g = 0;
			let _g1 = infos.customParams;
			while(_g < _g1.length) {
				let v = _g1[_g];
				++_g;
				str += ", " + Std.string(v);
			}
		}
		return pstr + ": " + str;
	}
	static trace(v,infos) {
		let str = haxe_Log.formatOutput(v,infos);
		if(typeof(console) != "undefined" && console.log != null) {
			console.log(str);
		}
	}
}
haxe_Log.__name__ = true;
class haxe_Timer {
	constructor(time_ms) {
		let me = this;
		this.id = setInterval(function() {
			me.run();
		},time_ms);
	}
	stop() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	run() {
	}
	static delay(f,time_ms) {
		let t = new haxe_Timer(time_ms);
		t.run = function() {
			t.stop();
			f();
		};
		return t;
	}
}
haxe_Timer.__name__ = true;
Object.assign(haxe_Timer.prototype, {
	__class__: haxe_Timer
});
class haxe_ValueException extends haxe_Exception {
	constructor(value,previous,native) {
		super(String(value),previous,native);
		this.value = value;
	}
	unwrap() {
		return this.value;
	}
}
haxe_ValueException.__name__ = true;
haxe_ValueException.__super__ = haxe_Exception;
Object.assign(haxe_ValueException.prototype, {
	__class__: haxe_ValueException
});
class haxe_crypto_BaseCode {
	constructor(base) {
		let len = base.length;
		let nbits = 1;
		while(len > 1 << nbits) ++nbits;
		if(nbits > 8 || len != 1 << nbits) {
			throw haxe_Exception.thrown("BaseCode : base length must be a power of two.");
		}
		this.base = base;
		this.nbits = nbits;
	}
	encodeBytes(b) {
		let nbits = this.nbits;
		let base = this.base;
		let size = b.length * 8 / nbits | 0;
		let out = new haxe_io_Bytes(new ArrayBuffer(size + (b.length * 8 % nbits == 0 ? 0 : 1)));
		let buf = 0;
		let curbits = 0;
		let mask = (1 << nbits) - 1;
		let pin = 0;
		let pout = 0;
		while(pout < size) {
			while(curbits < nbits) {
				curbits += 8;
				buf <<= 8;
				buf |= b.b[pin++];
			}
			curbits -= nbits;
			out.b[pout++] = base.b[buf >> curbits & mask];
		}
		if(curbits > 0) {
			out.b[pout++] = base.b[buf << nbits - curbits & mask];
		}
		return out;
	}
	initTable() {
		let tbl = [];
		let _g = 0;
		while(_g < 256) {
			let i = _g++;
			tbl[i] = -1;
		}
		let _g1 = 0;
		let _g2 = this.base.length;
		while(_g1 < _g2) {
			let i = _g1++;
			tbl[this.base.b[i]] = i;
		}
		this.tbl = tbl;
	}
	decodeBytes(b) {
		let nbits = this.nbits;
		let base = this.base;
		if(this.tbl == null) {
			this.initTable();
		}
		let tbl = this.tbl;
		let size = b.length * nbits >> 3;
		let out = new haxe_io_Bytes(new ArrayBuffer(size));
		let buf = 0;
		let curbits = 0;
		let pin = 0;
		let pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				let i = tbl[b.b[pin++]];
				if(i == -1) {
					throw haxe_Exception.thrown("BaseCode : invalid encoded char");
				}
				buf |= i;
			}
			curbits -= 8;
			out.b[pout++] = buf >> curbits & 255;
		}
		return out;
	}
}
haxe_crypto_BaseCode.__name__ = true;
Object.assign(haxe_crypto_BaseCode.prototype, {
	__class__: haxe_crypto_BaseCode
});
class haxe_ds_StringMap {
	constructor() {
		this.h = Object.create(null);
	}
	get(key) {
		return this.h[key];
	}
	keys() {
		return new haxe_ds__$StringMap_StringMapKeyIterator(this.h);
	}
}
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
Object.assign(haxe_ds_StringMap.prototype, {
	__class__: haxe_ds_StringMap
});
class haxe_ds__$StringMap_StringMapKeyIterator {
	constructor(h) {
		this.h = h;
		this.keys = Object.keys(h);
		this.length = this.keys.length;
		this.current = 0;
	}
	hasNext() {
		return this.current < this.length;
	}
	next() {
		return this.keys[this.current++];
	}
}
haxe_ds__$StringMap_StringMapKeyIterator.__name__ = true;
Object.assign(haxe_ds__$StringMap_StringMapKeyIterator.prototype, {
	__class__: haxe_ds__$StringMap_StringMapKeyIterator
});
class haxe_exceptions_PosException extends haxe_Exception {
	constructor(message,previous,pos) {
		super(message,previous);
		if(pos == null) {
			this.posInfos = { fileName : "(unknown)", lineNumber : 0, className : "(unknown)", methodName : "(unknown)"};
		} else {
			this.posInfos = pos;
		}
	}
	toString() {
		return "" + super.toString() + " in " + this.posInfos.className + "." + this.posInfos.methodName + " at " + this.posInfos.fileName + ":" + this.posInfos.lineNumber;
	}
}
haxe_exceptions_PosException.__name__ = true;
haxe_exceptions_PosException.__super__ = haxe_Exception;
Object.assign(haxe_exceptions_PosException.prototype, {
	__class__: haxe_exceptions_PosException
});
class haxe_exceptions_NotImplementedException extends haxe_exceptions_PosException {
	constructor(message,previous,pos) {
		if(message == null) {
			message = "Not implemented";
		}
		super(message,previous,pos);
	}
}
haxe_exceptions_NotImplementedException.__name__ = true;
haxe_exceptions_NotImplementedException.__super__ = haxe_exceptions_PosException;
Object.assign(haxe_exceptions_NotImplementedException.prototype, {
	__class__: haxe_exceptions_NotImplementedException
});
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__:true,__constructs__:null
	,Blocked: {_hx_name:"Blocked",_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_name:"Overflow",_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_name:"OutsideBounds",_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_._hx_name="Custom",$_.__params__ = ["e"],$_)
};
haxe_io_Error.__constructs__ = [haxe_io_Error.Blocked,haxe_io_Error.Overflow,haxe_io_Error.OutsideBounds,haxe_io_Error.Custom];
class haxe_io_Path {
	static normalize(path) {
		let slash = "/";
		path = path.split("\\").join(slash);
		if(path == slash) {
			return slash;
		}
		let target = [];
		let _g = 0;
		let _g1 = path.split(slash);
		while(_g < _g1.length) {
			let token = _g1[_g];
			++_g;
			if(token == ".." && target.length > 0 && target[target.length - 1] != "..") {
				target.pop();
			} else if(token == "") {
				if(target.length > 0 || HxOverrides.cca(path,0) == 47) {
					target.push(token);
				}
			} else if(token != ".") {
				target.push(token);
			}
		}
		let tmp = target.join(slash);
		let acc_b = "";
		let colon = false;
		let slashes = false;
		let _g2_offset = 0;
		let _g2_s = tmp;
		while(_g2_offset < _g2_s.length) {
			let s = _g2_s;
			let index = _g2_offset++;
			let c = s.charCodeAt(index);
			if(c >= 55296 && c <= 56319) {
				c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
			}
			let c1 = c;
			if(c1 >= 65536) {
				++_g2_offset;
			}
			let c2 = c1;
			switch(c2) {
			case 47:
				if(!colon) {
					slashes = true;
				} else {
					let i = c2;
					colon = false;
					if(slashes) {
						acc_b += "/";
						slashes = false;
					}
					acc_b += String.fromCodePoint(i);
				}
				break;
			case 58:
				acc_b += ":";
				colon = true;
				break;
			default:
				let i = c2;
				colon = false;
				if(slashes) {
					acc_b += "/";
					slashes = false;
				}
				acc_b += String.fromCodePoint(i);
			}
		}
		return acc_b;
	}
}
haxe_io_Path.__name__ = true;
class haxe_io_UInt8Array {
	static fromArray(a,pos,length) {
		if(pos == null) {
			pos = 0;
		}
		if(length == null) {
			length = a.length - pos;
		}
		if(pos < 0 || length < 0 || pos + length > a.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(pos == 0 && length == a.length) {
			return new Uint8Array(a);
		}
		let this1 = new Uint8Array(a.length);
		let i = this1;
		let _g = 0;
		let _g1 = length;
		while(_g < _g1) {
			let idx = _g++;
			i[idx] = a[idx + pos];
		}
		return i;
	}
}
class haxe_iterators_ArrayIterator {
	constructor(array) {
		this.current = 0;
		this.array = array;
	}
	hasNext() {
		return this.current < this.array.length;
	}
	next() {
		return this.array[this.current++];
	}
}
haxe_iterators_ArrayIterator.__name__ = true;
Object.assign(haxe_iterators_ArrayIterator.prototype, {
	__class__: haxe_iterators_ArrayIterator
});
class js_Boot {
	static getClass(o) {
		if(o == null) {
			return null;
		} else if(((o) instanceof Array)) {
			return Array;
		} else {
			let cl = o.__class__;
			if(cl != null) {
				return cl;
			}
			let name = js_Boot.__nativeClassName(o);
			if(name != null) {
				return js_Boot.__resolveNativeClass(name);
			}
			return null;
		}
	}
	static __string_rec(o,s) {
		if(o == null) {
			return "null";
		}
		if(s.length >= 5) {
			return "<...>";
		}
		let t = typeof(o);
		if(t == "function" && (o.__name__ || o.__ename__)) {
			t = "object";
		}
		switch(t) {
		case "function":
			return "<function>";
		case "object":
			if(o.__enum__) {
				let e = $hxEnums[o.__enum__];
				let con = e.__constructs__[o._hx_index];
				let n = con._hx_name;
				if(con.__params__) {
					s = s + "\t";
					return n + "(" + ((function($this) {
						var $r;
						let _g = [];
						{
							let _g1 = 0;
							let _g2 = con.__params__;
							while(true) {
								if(!(_g1 < _g2.length)) {
									break;
								}
								let p = _g2[_g1];
								_g1 = _g1 + 1;
								_g.push(js_Boot.__string_rec(o[p],s));
							}
						}
						$r = _g;
						return $r;
					}(this))).join(",") + ")";
				} else {
					return n;
				}
			}
			if(((o) instanceof Array)) {
				let str = "[";
				s += "\t";
				let _g = 0;
				let _g1 = o.length;
				while(_g < _g1) {
					let i = _g++;
					str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
				}
				str += "]";
				return str;
			}
			let tostr;
			try {
				tostr = o.toString;
			} catch( _g ) {
				return "???";
			}
			if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
				let s2 = o.toString();
				if(s2 != "[object Object]") {
					return s2;
				}
			}
			let str = "{\n";
			s += "\t";
			let hasp = o.hasOwnProperty != null;
			let k = null;
			for( k in o ) {
			if(hasp && !o.hasOwnProperty(k)) {
				continue;
			}
			if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
				continue;
			}
			if(str.length != 2) {
				str += ", \n";
			}
			str += s + k + " : " + js_Boot.__string_rec(o[k],s);
			}
			s = s.substring(1);
			str += "\n" + s + "}";
			return str;
		case "string":
			return o;
		default:
			return String(o);
		}
	}
	static __interfLoop(cc,cl) {
		if(cc == null) {
			return false;
		}
		if(cc == cl) {
			return true;
		}
		let intf = cc.__interfaces__;
		if(intf != null && (cc.__super__ == null || cc.__super__.__interfaces__ != intf)) {
			let _g = 0;
			let _g1 = intf.length;
			while(_g < _g1) {
				let i = _g++;
				let i1 = intf[i];
				if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
					return true;
				}
			}
		}
		return js_Boot.__interfLoop(cc.__super__,cl);
	}
	static __instanceof(o,cl) {
		if(cl == null) {
			return false;
		}
		switch(cl) {
		case Array:
			return ((o) instanceof Array);
		case Bool:
			return typeof(o) == "boolean";
		case Dynamic:
			return o != null;
		case Float:
			return typeof(o) == "number";
		case Int:
			if(typeof(o) == "number") {
				return ((o | 0) === o);
			} else {
				return false;
			}
			break;
		case String:
			return typeof(o) == "string";
		default:
			if(o != null) {
				if(typeof(cl) == "function") {
					if(js_Boot.__downcastCheck(o,cl)) {
						return true;
					}
				} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
					if(((o) instanceof cl)) {
						return true;
					}
				}
			} else {
				return false;
			}
			if(cl == Class ? o.__name__ != null : false) {
				return true;
			}
			if(cl == Enum ? o.__ename__ != null : false) {
				return true;
			}
			return o.__enum__ != null ? $hxEnums[o.__enum__] == cl : false;
		}
	}
	static __downcastCheck(o,cl) {
		if(!((o) instanceof cl)) {
			if(cl.__isInterface__) {
				return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	static __cast(o,t) {
		if(o == null || js_Boot.__instanceof(o,t)) {
			return o;
		} else {
			throw haxe_Exception.thrown("Cannot cast " + Std.string(o) + " to " + Std.string(t));
		}
	}
	static __nativeClassName(o) {
		let name = js_Boot.__toStr.call(o).slice(8,-1);
		if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
			return null;
		}
		return name;
	}
	static __isNativeObj(o) {
		return js_Boot.__nativeClassName(o) != null;
	}
	static __resolveNativeClass(name) {
		return $global[name];
	}
}
js_Boot.__name__ = true;
function $getIterator(o) { if( o instanceof Array ) return new haxe_iterators_ArrayIterator(o); else return o.iterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
{
	String.prototype.__class__ = String;
	String.__name__ = true;
	Array.__name__ = true;
	Date.prototype.__class__ = Date;
	Date.__name__ = "Date";
	var Int = { };
	var Dynamic = { };
	var Float = Number;
	var Bool = Boolean;
	var Class = { };
	var Enum = { };
}
js_Boot.__toStr = ({ }).toString;
DateTools.DAY_SHORT_NAMES = ["Sun","Mon","Tue","Wed","Thu","Fri","Sat"];
DateTools.DAY_NAMES = ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"];
DateTools.MONTH_SHORT_NAMES = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];
DateTools.MONTH_NAMES = ["January","February","March","April","May","June","July","August","September","October","November","December"];
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
Tests.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

//# sourceMappingURL=index.js.map